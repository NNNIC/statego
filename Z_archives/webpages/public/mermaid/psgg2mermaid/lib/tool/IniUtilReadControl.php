<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace tool;

use \php\_Boot\HxAnon;
use \php\Boot;
use \psgg\HxRegexUtil;
use \haxe\Log;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;
use \haxe\ds\EnumValueMap;

class IniUtilReadControl {
	/**
	 * @var int
	 */
	public $MAX_CALLSTACK;
	/**
	 * @var string
	 */
	public $m_buf;
	/**
	 * @var int
	 */
	public $m_callstack_level;
	/**
	 * @var \Array_hx
	 */
	public $m_callstacks;
	/**
	 * @var IniUtilReadControl_STATE
	 */
	public $m_curfunc;
	/**
	 * @var EnumValueMap
	 */
	public $m_funcmap;
	/**
	 * @var string
	 */
	public $m_group;
	/**
	 * @var int
	 */
	public $m_index;
	/**
	 * @var string
	 */
	public $m_key;
	/**
	 * @var string
	 */
	public $m_line;
	/**
	 * @var \Array_hx
	 */
	public $m_lines;
	/**
	 * @var StringMap
	 */
	public $m_map;
	/**
	 * @var StringMap
	 */
	public $m_mapg;
	/**
	 * @var IniUtilReadControl_STATE
	 */
	public $m_nextfunc;
	/**
	 * @var bool
	 */
	public $m_noWait;
	/**
	 * @var string
	 */
	public $m_val;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/tool/IniUtilReadControl.hx:82: characters 29-30
		$this->m_callstack_level = 0;
		#src/tool/IniUtilReadControl.hx:80: characters 31-33
		$this->MAX_CALLSTACK = 10;
		#src/tool/IniUtilReadControl.hx:107: characters 9-53
		$this->m_curfunc = IniUtilReadControl_STATE::none();
		#src/tool/IniUtilReadControl.hx:108: characters 9-53
		$this->m_nextfunc = IniUtilReadControl_STATE::none();
		#src/tool/IniUtilReadControl.hx:109: characters 24-83
		$_g = new \Array_hx();
		#src/tool/IniUtilReadControl.hx:109: characters 34-38
		$_g1 = 0;
		#src/tool/IniUtilReadControl.hx:109: characters 38-51
		$_g2 = $this->MAX_CALLSTACK;
		#src/tool/IniUtilReadControl.hx:109: characters 25-82
		while ($_g1 < $_g2) {
			#src/tool/IniUtilReadControl.hx:109: characters 34-51
			$i = $_g1++;
			#src/tool/IniUtilReadControl.hx:109: characters 53-82
			$_g->arr[$_g->length++] = IniUtilReadControl_STATE::none();
		}
		#src/tool/IniUtilReadControl.hx:109: characters 9-83
		$this->m_callstacks = $_g;
		#src/tool/IniUtilReadControl.hx:110: lines 110-137
		$_g = new EnumValueMap();
		$_g->set(IniUtilReadControl_STATE::S_CHECK(), Boot::getInstanceClosure($this, 'S_CHECK'));
		$_g->set(IniUtilReadControl_STATE::S_CHECK_MAPG(), Boot::getInstanceClosure($this, 'S_CHECK_MAPG'));
		$_g->set(IniUtilReadControl_STATE::S_CREATE_MAPG(), Boot::getInstanceClosure($this, 'S_CREATE_MAPG'));
		$_g->set(IniUtilReadControl_STATE::S_END(), Boot::getInstanceClosure($this, 'S_END'));
		$_g->set(IniUtilReadControl_STATE::S_GET_GROUPNAME(), Boot::getInstanceClosure($this, 'S_GET_GROUPNAME'));
		$_g->set(IniUtilReadControl_STATE::S_GET_KEY_VAL(), Boot::getInstanceClosure($this, 'S_GET_KEY_VAL'));
		$_g->set(IniUtilReadControl_STATE::S_GET_KEY_VAL1(), Boot::getInstanceClosure($this, 'S_GET_KEY_VAL1'));
		$_g->set(IniUtilReadControl_STATE::S_IF_MAPG_EXISTS(), Boot::getInstanceClosure($this, 'S_IF_MAPG_EXISTS'));
		$_g->set(IniUtilReadControl_STATE::S_INIT(), Boot::getInstanceClosure($this, 'S_INIT'));
		$_g->set(IniUtilReadControl_STATE::S_LOP000(), Boot::getInstanceClosure($this, 'S_LOP000'));
		$_g->set(IniUtilReadControl_STATE::S_LOP000_Check____(), Boot::getInstanceClosure($this, 'S_LOP000_Check____'));
		$_g->set(IniUtilReadControl_STATE::S_LOP000_Next____(), Boot::getInstanceClosure($this, 'S_LOP000_Next____'));
		$_g->set(IniUtilReadControl_STATE::S_PAS000(), Boot::getInstanceClosure($this, 'S_PAS000'));
		$_g->set(IniUtilReadControl_STATE::S_REGISTER_MAPG(), Boot::getInstanceClosure($this, 'S_REGISTER_MAPG'));
		$_g->set(IniUtilReadControl_STATE::S_RET000(), Boot::getInstanceClosure($this, 'S_RET000'));
		$_g->set(IniUtilReadControl_STATE::S_SBS000(), Boot::getInstanceClosure($this, 'S_SBS000'));
		$_g->set(IniUtilReadControl_STATE::S_SBS001(), Boot::getInstanceClosure($this, 'S_SBS001'));
		$_g->set(IniUtilReadControl_STATE::S_SPLIT(), Boot::getInstanceClosure($this, 'S_SPLIT'));
		$_g->set(IniUtilReadControl_STATE::S_START(), Boot::getInstanceClosure($this, 'S_START'));
		$_g->set(IniUtilReadControl_STATE::unknown(), null);
		$this->m_funcmap = $_g;
	}

	/**
	 * @param IniUtilReadControl_STATE $func
	 * 
	 * @return bool
	 */
	public function CheckState ($func) {
		#src/tool/IniUtilReadControl.hx:68: characters 9-33
		return $this->m_curfunc === $func;
	}

	/**
	 * @param IniUtilReadControl_STATE $nextstate
	 * @param IniUtilReadControl_STATE $returnstate
	 * 
	 * @return void
	 */
	public function GoSubState ($nextstate, $returnstate) {
		#src/tool/IniUtilReadControl.hx:85: lines 85-88
		if ($this->m_callstack_level >= ($this->MAX_CALLSTACK - 1)) {
			#src/tool/IniUtilReadControl.hx:86: characters 13-18
			(Log::$trace)("CALL STACK OVERFLOW", new HxAnon([
				"fileName" => "src/tool/IniUtilReadControl.hx",
				"lineNumber" => 86,
				"className" => "tool.IniUtilReadControl",
				"methodName" => "GoSubState",
			]));
			#src/tool/IniUtilReadControl.hx:87: characters 13-19
			return;
		}
		#src/tool/IniUtilReadControl.hx:89: characters 9-54
		$this->m_callstacks->offsetSet($this->m_callstack_level, $returnstate);
		#src/tool/IniUtilReadControl.hx:90: characters 9-31
		$this->m_callstack_level += 1;
		#src/tool/IniUtilReadControl.hx:91: characters 9-24
		$this->Goto($nextstate);
	}

	/**
	 * @param IniUtilReadControl_STATE $func
	 * 
	 * @return void
	 */
	public function Goto ($func) {
		#src/tool/IniUtilReadControl.hx:64: characters 9-26
		$this->m_nextfunc = $func;
	}

	/**
	 * @return bool
	 */
	public function HasNextState () {
		#src/tool/IniUtilReadControl.hx:72: characters 9-59
		return $this->m_nextfunc !== IniUtilReadControl_STATE::none();
	}

	/**
	 * @return bool
	 */
	public function IsEnd () {
		#src/tool/IniUtilReadControl.hx:148: characters 9-58
		return $this->CheckState(IniUtilReadControl_STATE::S_END());
	}

	/**
	 * @return void
	 */
	public function NoWait () {
		#src/tool/IniUtilReadControl.hx:76: characters 9-24
		$this->m_noWait = true;
	}

	/**
	 * @return void
	 */
	public function ReturnState () {
		#src/tool/IniUtilReadControl.hx:95: lines 95-98
		if ($this->m_callstack_level <= 0) {
			#src/tool/IniUtilReadControl.hx:96: characters 13-18
			(Log::$trace)("CALL STACK UNDERFLOW", new HxAnon([
				"fileName" => "src/tool/IniUtilReadControl.hx",
				"lineNumber" => 96,
				"className" => "tool.IniUtilReadControl",
				"methodName" => "ReturnState",
			]));
			#src/tool/IniUtilReadControl.hx:97: characters 13-19
			return;
		}
		#src/tool/IniUtilReadControl.hx:99: characters 9-31
		$this->m_callstack_level -= 1;
		#src/tool/IniUtilReadControl.hx:100: characters 9-57
		$nextstate = ($this->m_callstacks->arr[$this->m_callstack_level] ?? null);
		#src/tool/IniUtilReadControl.hx:101: characters 9-24
		$this->Goto($nextstate);
	}

	/**
	 * @return void
	 */
	public function Run () {
		#src/tool/IniUtilReadControl.hx:153: characters 9-30
		$LOOPMAX = 100000;
		#src/tool/IniUtilReadControl.hx:154: characters 9-26
		$bEnd = false;
		#src/tool/IniUtilReadControl.hx:155: characters 3-10
		$this->Start();
		#src/tool/IniUtilReadControl.hx:156: characters 17-21
		$_g = 0;
		#src/tool/IniUtilReadControl.hx:156: characters 21-28
		$_g1 = $LOOPMAX;
		#src/tool/IniUtilReadControl.hx:156: lines 156-167
		while ($_g < $_g1) {
			#src/tool/IniUtilReadControl.hx:156: characters 17-28
			$loop_1 = $_g++;
			#src/tool/IniUtilReadControl.hx:158: characters 13-28
			if ($bEnd) {
				#src/tool/IniUtilReadControl.hx:158: characters 23-28
				break;
			}
			#src/tool/IniUtilReadControl.hx:159: lines 159-161
			if ($loop_1 >= ($LOOPMAX - 1)) {
				#src/tool/IniUtilReadControl.hx:160: characters 17-22
				(Log::$trace)("OUT OF LOOP. INCREASE LOOPMAX OR MODIFY USING WHILE", new HxAnon([
					"fileName" => "src/tool/IniUtilReadControl.hx",
					"lineNumber" => 160,
					"className" => "tool.IniUtilReadControl",
					"methodName" => "Run",
				]));
			}
			#src/tool/IniUtilReadControl.hx:162: characters 27-31
			$_g2 = 0;
			#src/tool/IniUtilReadControl.hx:162: characters 31-38
			$_g3 = $LOOPMAX;
			#src/tool/IniUtilReadControl.hx:162: lines 162-166
			while ($_g2 < $_g3) {
				#src/tool/IniUtilReadControl.hx:162: characters 27-38
				$loop_2 = $_g2++;
				#src/tool/IniUtilReadControl.hx:163: characters 17-25
				$this->Update();
				#src/tool/IniUtilReadControl.hx:164: characters 17-31
				$bEnd = $this->IsEnd();
				#src/tool/IniUtilReadControl.hx:165: characters 17-32
				if ($bEnd) {
					#src/tool/IniUtilReadControl.hx:165: characters 27-32
					break;
				}
			}
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_CHECK ($bFirst) {
		#src/tool/IniUtilReadControl.hx:204: characters 9-68
		$bGroup = HxRegexUtil::IsMatch("^\\[.+\\]", $this->m_line);
		#src/tool/IniUtilReadControl.hx:205: characters 9-64
		$bCmt = HxRegexUtil::IsMatch("^\\s*;", $this->m_line);
		#src/tool/IniUtilReadControl.hx:206: characters 9-69
		$bMulti = HxRegexUtil::IsMatch("^\\s*.+=@@@", $this->m_line);
		#src/tool/IniUtilReadControl.hx:207: characters 9-68
		$bSingle = HxRegexUtil::IsMatch("^\\s*.+=.+", $this->m_line);
		#src/tool/IniUtilReadControl.hx:209: lines 209-213
		if ($bGroup) {
			#src/tool/IniUtilReadControl.hx:209: characters 23-68
			$this->Goto(IniUtilReadControl_STATE::S_CHECK_MAPG());
		} else if ($bMulti) {
			#src/tool/IniUtilReadControl.hx:210: characters 28-75
			$this->Goto(IniUtilReadControl_STATE::S_GET_KEY_VAL1());
		} else if ($bSingle) {
			#src/tool/IniUtilReadControl.hx:211: characters 29-75
			$this->Goto(IniUtilReadControl_STATE::S_GET_KEY_VAL());
		} else if ($bCmt) {
			#src/tool/IniUtilReadControl.hx:212: characters 26-67
			$this->Goto(IniUtilReadControl_STATE::S_PAS000());
		} else {
			#src/tool/IniUtilReadControl.hx:213: characters 16-57
			$this->Goto(IniUtilReadControl_STATE::S_PAS000());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_CHECK_MAPG ($bFirst) {
		#src/tool/IniUtilReadControl.hx:221: lines 221-222
		if ($this->m_mapg === null) {
			#src/tool/IniUtilReadControl.hx:221: characters 29-77
			$this->Goto(IniUtilReadControl_STATE::S_GET_GROUPNAME());
		} else {
			#src/tool/IniUtilReadControl.hx:222: characters 16-64
			$this->Goto(IniUtilReadControl_STATE::S_REGISTER_MAPG());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_CREATE_MAPG ($bFirst) {
		#src/tool/IniUtilReadControl.hx:230: lines 230-233
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:232: characters 13-47
			$this->m_mapg = new StringMap();
		}
		#src/tool/IniUtilReadControl.hx:235: lines 235-238
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:237: characters 13-52
			$this->Goto(IniUtilReadControl_STATE::S_RET000());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_END ($bFirst) {
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_GET_GROUPNAME ($bFirst) {
		#src/tool/IniUtilReadControl.hx:252: lines 252-258
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:254: characters 13-73
			$word = HxRegexUtil::Get1stMatch("\\[.+\\]", $this->m_line);
			#src/tool/IniUtilReadControl.hx:255: characters 20-34
			$word = \mb_substr($word, 1, null);
			#src/tool/IniUtilReadControl.hx:256: characters 20-48
			$word = \mb_substr($word, 0, mb_strlen($word) - 1);
			#src/tool/IniUtilReadControl.hx:257: characters 13-27
			$this->m_group = $word;
		}
		#src/tool/IniUtilReadControl.hx:260: lines 260-263
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:262: characters 13-57
			$this->Goto(IniUtilReadControl_STATE::S_CREATE_MAPG());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_GET_KEY_VAL ($bFirst) {
		#src/tool/IniUtilReadControl.hx:271: lines 271-280
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:273: characters 13-47
			$eqindex = HxString::indexOf($this->m_line, "=");
			#src/tool/IniUtilReadControl.hx:274: characters 13-45
			$this->m_key = \mb_substr($this->m_line, 0, $eqindex);
			#src/tool/IniUtilReadControl.hx:275: characters 13-44
			$this->m_key = \trim($this->m_key);
			#src/tool/IniUtilReadControl.hx:276: characters 13-45
			$this->m_val = \mb_substr($this->m_line, $eqindex + 1, null);
			#src/tool/IniUtilReadControl.hx:277: characters 13-44
			$this->m_val = \trim($this->m_val);
			#src/tool/IniUtilReadControl.hx:278: characters 13-55
			$map = ($this->m_mapg !== null ? $this->m_mapg : $this->m_map);
			#src/tool/IniUtilReadControl.hx:279: characters 13-35
			$this->m_map->data[$this->m_key] = $this->m_val;
		}
		#src/tool/IniUtilReadControl.hx:282: lines 282-285
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:284: characters 13-52
			$this->Goto(IniUtilReadControl_STATE::S_RET000());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_GET_KEY_VAL1 ($bFirst) {
		#src/tool/IniUtilReadControl.hx:293: lines 293-317
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:295: characters 13-47
			$eqindex = HxString::indexOf($this->m_line, "=");
			#src/tool/IniUtilReadControl.hx:296: characters 13-45
			$this->m_key = \mb_substr($this->m_line, 0, $eqindex);
			#src/tool/IniUtilReadControl.hx:297: characters 13-44
			$this->m_key = \trim($this->m_key);
			#src/tool/IniUtilReadControl.hx:298: characters 13-25
			$this->m_val = null;
			#src/tool/IniUtilReadControl.hx:299: characters 13-25
			$this->m_index += 1;
			#src/tool/IniUtilReadControl.hx:300: lines 300-314
			while ($this->m_index < $this->m_lines->length) {
				#src/tool/IniUtilReadControl.hx:301: characters 17-42
				$this->m_line = ($this->m_lines->arr[$this->m_index] ?? null);
				#src/tool/IniUtilReadControl.hx:302: characters 17-51
				$this->m_line = \rtrim($this->m_line);
				#src/tool/IniUtilReadControl.hx:303: lines 303-305
				if (HxRegexUtil::IsMatch("^@@@\$", $this->m_line)) {
					#src/tool/IniUtilReadControl.hx:304: characters 21-26
					break;
				}
				#src/tool/IniUtilReadControl.hx:306: lines 306-312
				if ($this->m_val !== null) {
					#src/tool/IniUtilReadControl.hx:307: characters 21-40
					$this->m_val = ($this->m_val??'null') . "\x0D\x0A";
					#src/tool/IniUtilReadControl.hx:308: characters 21-36
					$this->m_val = ($this->m_val??'null') . ($this->m_line??'null');
				} else {
					#src/tool/IniUtilReadControl.hx:311: characters 21-35
					$this->m_val = $this->m_line;
				}
				#src/tool/IniUtilReadControl.hx:313: characters 17-29
				$this->m_index += 1;
			}
			#src/tool/IniUtilReadControl.hx:315: characters 13-53
			$map = ($this->m_mapg !== null ? $this->m_mapg : $this->m_map);
			#src/tool/IniUtilReadControl.hx:316: characters 13-33
			$map->data[$this->m_key] = $this->m_val;
		}
		#src/tool/IniUtilReadControl.hx:319: lines 319-322
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:321: characters 13-52
			$this->Goto(IniUtilReadControl_STATE::S_RET000());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_IF_MAPG_EXISTS ($bFirst) {
		#src/tool/IniUtilReadControl.hx:330: lines 330-336
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:332: lines 332-335
			if ($this->m_mapg !== null) {
				#src/tool/IniUtilReadControl.hx:333: characters 17-43
				$this->m_map->data[$this->m_group] = $this->m_mapg;
				#src/tool/IniUtilReadControl.hx:334: characters 17-30
				$this->m_mapg = null;
			}
		}
		#src/tool/IniUtilReadControl.hx:338: lines 338-341
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:340: characters 13-49
			$this->Goto(IniUtilReadControl_STATE::S_END());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_INIT ($bFirst) {
		#src/tool/IniUtilReadControl.hx:350: lines 350-355
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:352: characters 13-46
			$this->m_map = new StringMap();
			#src/tool/IniUtilReadControl.hx:353: characters 13-26
			$this->m_mapg = null;
			#src/tool/IniUtilReadControl.hx:354: characters 13-27
			$this->m_group = null;
		}
		#src/tool/IniUtilReadControl.hx:357: lines 357-360
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:359: characters 13-51
			$this->Goto(IniUtilReadControl_STATE::S_SPLIT());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_LOP000 ($bFirst) {
		#src/tool/IniUtilReadControl.hx:367: characters 9-20
		$this->m_index = 0;
		#src/tool/IniUtilReadControl.hx:368: characters 9-58
		$this->Goto(IniUtilReadControl_STATE::S_LOP000_Check____());
		#src/tool/IniUtilReadControl.hx:369: characters 9-17
		$this->NoWait();
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_LOP000_Check____ ($bFirst) {
		#src/tool/IniUtilReadControl.hx:373: lines 373-374
		if ($this->m_index < $this->m_lines->length) {
			#src/tool/IniUtilReadControl.hx:373: characters 39-127
			$this->GoSubState(IniUtilReadControl_STATE::S_SBS000(), IniUtilReadControl_STATE::S_LOP000_Next____());
		} else {
			#src/tool/IniUtilReadControl.hx:374: characters 28-75
			$this->Goto(IniUtilReadControl_STATE::S_IF_MAPG_EXISTS());
		}
		#src/tool/IniUtilReadControl.hx:375: characters 9-17
		$this->NoWait();
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_LOP000_Next____ ($bFirst) {
		#src/tool/IniUtilReadControl.hx:379: characters 9-19
		$this->m_index += 1;
		#src/tool/IniUtilReadControl.hx:380: characters 9-58
		$this->Goto(IniUtilReadControl_STATE::S_LOP000_Check____());
		#src/tool/IniUtilReadControl.hx:381: characters 9-17
		$this->NoWait();
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_PAS000 ($bFirst) {
		#src/tool/IniUtilReadControl.hx:389: lines 389-392
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:391: characters 13-52
			$this->Goto(IniUtilReadControl_STATE::S_RET000());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_REGISTER_MAPG ($bFirst) {
		#src/tool/IniUtilReadControl.hx:400: lines 400-404
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:402: characters 13-36
			$v = $this->m_mapg;
			$this->m_map->data[$this->m_group] = $v;
			#src/tool/IniUtilReadControl.hx:403: characters 13-26
			$this->m_mapg = null;
		}
		#src/tool/IniUtilReadControl.hx:406: lines 406-409
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:408: characters 13-59
			$this->Goto(IniUtilReadControl_STATE::S_GET_GROUPNAME());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_RET000 ($bFirst) {
		#src/tool/IniUtilReadControl.hx:416: characters 9-22
		$this->ReturnState();
		#src/tool/IniUtilReadControl.hx:417: characters 9-17
		$this->NoWait();
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_SBS000 ($bFirst) {
		#src/tool/IniUtilReadControl.hx:424: characters 9-48
		$this->Goto(IniUtilReadControl_STATE::S_SBS001());
		#src/tool/IniUtilReadControl.hx:425: characters 9-17
		$this->NoWait();
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_SBS001 ($bFirst) {
		#src/tool/IniUtilReadControl.hx:433: lines 433-436
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:435: characters 13-38
			$this->m_line = ($this->m_lines->arr[$this->m_index] ?? null);
		}
		#src/tool/IniUtilReadControl.hx:438: lines 438-441
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:440: characters 13-51
			$this->Goto(IniUtilReadControl_STATE::S_CHECK());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_SPLIT ($bFirst) {
		#src/tool/IniUtilReadControl.hx:450: lines 450-456
		if ($bFirst) {
			#src/tool/IniUtilReadControl.hx:452: characters 13-42
			$this->m_lines = HxString::split($this->m_buf, "\x0A");
			#src/tool/IniUtilReadControl.hx:453: characters 22-26
			$_g = 0;
			#src/tool/IniUtilReadControl.hx:453: characters 26-40
			$_g1 = $this->m_lines->length;
			#src/tool/IniUtilReadControl.hx:453: lines 453-455
			while ($_g < $_g1) {
				#src/tool/IniUtilReadControl.hx:453: characters 22-40
				$i = $_g++;
				#src/tool/IniUtilReadControl.hx:454: characters 17-59
				$this->m_lines->offsetSet($i, \rtrim(($this->m_lines->arr[$i] ?? null)));
			}
		}
		#src/tool/IniUtilReadControl.hx:458: lines 458-461
		if (!$this->HasNextState()) {
			#src/tool/IniUtilReadControl.hx:460: characters 13-52
			$this->Goto(IniUtilReadControl_STATE::S_LOP000());
		}
	}

	/**
	 * @param bool $bFirst
	 * 
	 * @return void
	 */
	public function S_START ($bFirst) {
		#src/tool/IniUtilReadControl.hx:468: characters 9-46
		$this->Goto(IniUtilReadControl_STATE::S_INIT());
		#src/tool/IniUtilReadControl.hx:469: characters 9-17
		$this->NoWait();
	}

	/**
	 * @return void
	 */
	public function Start () {
		#src/tool/IniUtilReadControl.hx:144: characters 9-47
		$this->Goto(IniUtilReadControl_STATE::S_START());
	}

	/**
	 * @return void
	 */
	public function Update () {
		#src/tool/IniUtilReadControl.hx:45: lines 45-60
		while (true) {
			#src/tool/IniUtilReadControl.hx:47: characters 13-32
			$bFirst = false;
			#src/tool/IniUtilReadControl.hx:48: lines 48-53
			if ($this->m_nextfunc !== IniUtilReadControl_STATE::none()) {
				#src/tool/IniUtilReadControl.hx:50: characters 17-39
				$this->m_curfunc = $this->m_nextfunc;
				#src/tool/IniUtilReadControl.hx:51: characters 17-59
				$this->m_nextfunc = IniUtilReadControl_STATE::none();
				#src/tool/IniUtilReadControl.hx:52: characters 17-30
				$bFirst = true;
			}
			#src/tool/IniUtilReadControl.hx:54: characters 13-29
			$this->m_noWait = false;
			#src/tool/IniUtilReadControl.hx:55: lines 55-58
			if ($this->m_curfunc !== IniUtilReadControl_STATE::none()) {
				#src/tool/IniUtilReadControl.hx:57: characters 17-45
				$this->m_funcmap->get($this->m_curfunc)($bFirst);
			}
			#src/tool/IniUtilReadControl.hx:59: characters 13-33
			if (!$this->m_noWait) {
				#src/tool/IniUtilReadControl.hx:59: characters 28-33
				break;
			}
		}
	}
}

Boot::registerClass(IniUtilReadControl::class, 'tool.IniUtilReadControl');
