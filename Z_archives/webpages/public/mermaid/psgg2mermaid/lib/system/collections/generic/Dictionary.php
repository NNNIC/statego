<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace system\collections\generic;

use \php\Boot;
use \haxe\ds\_List\ListIterator;
use \haxe\Exception;
use \system\Cs2Hx;
use \system\Exception as SystemException;
use \haxe\ds\List_hx;
use \haxe\ds\StringMap;
use \system\CsRef;

class Dictionary implements IEnumerable {
	/**
	 * @var \Array_hx
	 */
	public $keys;
	/**
	 * @var StringMap
	 */
	public $store;

	/**
	 * @param mixed $unused
	 * 
	 * @return void
	 */
	public function __construct ($unused = null) {
		#src/system/collections/generic/Dictionary.hx:15: characters 3-31
		$this->store = new StringMap();
		#src/system/collections/generic/Dictionary.hx:16: characters 3-24
		$this->keys = new \Array_hx();
	}

	/**
	 * @param mixed $key
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function Add ($key, $value) {
		#src/system/collections/generic/Dictionary.hx:21: lines 21-22
		if ($this->ContainsKey($key)) {
			#src/system/collections/generic/Dictionary.hx:22: characters 4-9
			throw Exception::thrown(new SystemException("Key already exists: " . (\Std::string($key)??'null')));
		}
		#src/system/collections/generic/Dictionary.hx:23: characters 3-36
		$this1 = $this->store;
		$key1 = Cs2Hx::Hash($key);
		$this1->data[$key1] = $value;
		#src/system/collections/generic/Dictionary.hx:24: characters 3-17
		$_this = $this->keys;
		$_this->arr[$_this->length++] = $key;
	}

	/**
	 * @return void
	 */
	public function Clear () {
		#src/system/collections/generic/Dictionary.hx:127: characters 3-24
		$this->keys = new \Array_hx();
		#src/system/collections/generic/Dictionary.hx:128: characters 3-31
		$this->store = new StringMap();
	}

	/**
	 * @return Dictionary
	 */
	public function Clone () {
		#src/system/collections/generic/Dictionary.hx:133: characters 3-35
		$ret = new Dictionary();
		#src/system/collections/generic/Dictionary.hx:134: lines 134-135
		$_g = 0;
		$_g1 = $this->keys;
		while ($_g < $_g1->length) {
			#src/system/collections/generic/Dictionary.hx:134: characters 8-9
			$k = ($_g1->arr[$_g] ?? null);
			#src/system/collections/generic/Dictionary.hx:134: lines 134-135
			++$_g;
			#src/system/collections/generic/Dictionary.hx:135: characters 15-39
			$this1 = $this->store;
			$key = Cs2Hx::Hash($k);
			#src/system/collections/generic/Dictionary.hx:135: characters 4-40
			$ret->Add($k, ($this1->data[$key] ?? null));
		}
		#src/system/collections/generic/Dictionary.hx:136: characters 3-13
		return $ret;
	}

	/**
	 * @param mixed $key
	 * 
	 * @return bool
	 */
	public function ContainsKey ($key) {
		#src/system/collections/generic/Dictionary.hx:46: characters 10-39
		$this1 = $this->store;
		return \array_key_exists(Cs2Hx::Hash($key), $this1->data);
	}

	/**
	 * @return \Array_hx
	 */
	public function GetEnumerator () {
		#src/system/collections/generic/Dictionary.hx:119: characters 3-45
		$ret = new \Array_hx();
		#src/system/collections/generic/Dictionary.hx:120: lines 120-121
		$_g = 0;
		$_g1 = $this->keys;
		while ($_g < $_g1->length) {
			#src/system/collections/generic/Dictionary.hx:120: characters 8-9
			$k = ($_g1->arr[$_g] ?? null);
			#src/system/collections/generic/Dictionary.hx:120: lines 120-121
			++$_g;
			#src/system/collections/generic/Dictionary.hx:121: characters 33-57
			$this1 = $this->store;
			$key = Cs2Hx::Hash($k);
			#src/system/collections/generic/Dictionary.hx:121: characters 4-59
			$x = new KeyValuePair($k, ($this1->data[$key] ?? null));
			$ret->arr[$ret->length++] = $x;
		}
		#src/system/collections/generic/Dictionary.hx:122: characters 3-13
		return $ret;
	}

	/**
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	public function GetValue ($key) {
		#src/system/collections/generic/Dictionary.hx:37: characters 3-28
		return $this->GetValue_TKey($key);
	}

	/**
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	public function GetValueOrNull ($key) {
		#src/system/collections/generic/Dictionary.hx:93: characters 3-34
		$s = Cs2Hx::Hash($key);
		#src/system/collections/generic/Dictionary.hx:94: lines 94-97
		if (\array_key_exists($s, $this->store->data)) {
			#src/system/collections/generic/Dictionary.hx:95: characters 11-23
			return ($this->store->data[$s] ?? null);
		} else {
			#src/system/collections/generic/Dictionary.hx:97: characters 4-15
			return null;
		}
	}

	/**
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	public function GetValue_Object ($key) {
		#src/system/collections/generic/Dictionary.hx:41: characters 3-28
		return $this->GetValue_TKey($key);
	}

	/**
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	public function GetValue_TKey ($key) {
		#src/system/collections/generic/Dictionary.hx:29: characters 3-27
		$h = Cs2Hx::Hash($key);
		#src/system/collections/generic/Dictionary.hx:31: lines 31-32
		if (!\array_key_exists($h, $this->store->data)) {
			#src/system/collections/generic/Dictionary.hx:32: characters 4-9
			throw Exception::thrown(new SystemException("Key does not exist: " . ($h??'null')));
		}
		#src/system/collections/generic/Dictionary.hx:33: characters 10-22
		return ($this->store->data[$h] ?? null);
	}

	/**
	 * @param mixed $key
	 * 
	 * @return bool
	 */
	public function Remove ($key) {
		#src/system/collections/generic/Dictionary.hx:51: lines 51-52
		if (!$this->ContainsKey($key)) {
			#src/system/collections/generic/Dictionary.hx:52: characters 4-16
			return false;
		}
		#src/system/collections/generic/Dictionary.hx:54: characters 3-32
		$this->store->remove(Cs2Hx::Hash($key));
		#src/system/collections/generic/Dictionary.hx:55: characters 3-19
		$this->keys->remove($key);
		#src/system/collections/generic/Dictionary.hx:56: characters 3-14
		return true;
	}

	/**
	 * @param mixed $key
	 * @param mixed $val
	 * 
	 * @return void
	 */
	public function SetValue ($key, $val) {
		#src/system/collections/generic/Dictionary.hx:61: characters 3-26
		$this->SetValue_TKey($key, $val);
	}

	/**
	 * @param mixed $key
	 * @param mixed $val
	 * 
	 * @return mixed
	 */
	public function SetValue_TKey ($key, $val) {
		#src/system/collections/generic/Dictionary.hx:65: characters 3-34
		$s = Cs2Hx::Hash($key);
		#src/system/collections/generic/Dictionary.hx:67: lines 67-68
		if (!\array_key_exists($s, $this->store->data)) {
			#src/system/collections/generic/Dictionary.hx:68: characters 4-18
			$_this = $this->keys;
			$_this->arr[$_this->length++] = $key;
		}
		#src/system/collections/generic/Dictionary.hx:69: characters 3-20
		$this->store->data[$s] = $val;
		#src/system/collections/generic/Dictionary.hx:70: characters 3-13
		return $val;
	}

	/**
	 * @param mixed $key
	 * @param CsRef $out
	 * 
	 * @return bool
	 */
	public function TryGetValue ($key, $out) {
		#src/system/collections/generic/Dictionary.hx:81: characters 3-34
		$s = Cs2Hx::Hash($key);
		#src/system/collections/generic/Dictionary.hx:82: lines 82-88
		if (\array_key_exists($s, $this->store->data)) {
			#src/system/collections/generic/Dictionary.hx:84: characters 4-28
			$out->Value = ($this->store->data[$s] ?? null);
			#src/system/collections/generic/Dictionary.hx:85: characters 4-15
			return true;
		} else {
			#src/system/collections/generic/Dictionary.hx:88: characters 4-16
			return false;
		}
	}

	/**
	 * @return int
	 */
	public function get_Count () {
		#src/system/collections/generic/Dictionary.hx:114: characters 3-21
		return $this->keys->length;
	}

	/**
	 * @return \Array_hx
	 */
	public function get_Keys () {
		#src/system/collections/generic/Dictionary.hx:76: characters 3-14
		return $this->keys;
	}

	/**
	 * @return \Array_hx
	 */
	public function get_Values () {
		#src/system/collections/generic/Dictionary.hx:104: characters 3-28
		$ret = new \Array_hx();
		#src/system/collections/generic/Dictionary.hx:105: characters 3-17
		$i = 0;
		#src/system/collections/generic/Dictionary.hx:106: lines 106-107
		$_g = 0;
		$_g1 = $this->keys;
		while ($_g < $_g1->length) {
			#src/system/collections/generic/Dictionary.hx:106: characters 8-9
			$k = ($_g1->arr[$_g] ?? null);
			#src/system/collections/generic/Dictionary.hx:106: lines 106-107
			++$_g;
			#src/system/collections/generic/Dictionary.hx:107: characters 15-39
			$this1 = $this->store;
			$key = Cs2Hx::Hash($k);
			#src/system/collections/generic/Dictionary.hx:107: characters 4-39
			$ret->offsetSet($i++, ($this1->data[$key] ?? null));
		}
		#src/system/collections/generic/Dictionary.hx:108: characters 3-13
		return $ret;
	}

	/**
	 * @return object
	 */
	public function iterator () {
		#src/system/collections/generic/Dictionary.hx:141: characters 3-50
		$ret = new List_hx();
		#src/system/collections/generic/Dictionary.hx:142: lines 142-143
		$_g = 0;
		$_g1 = $this->keys;
		while ($_g < $_g1->length) {
			#src/system/collections/generic/Dictionary.hx:142: characters 8-9
			$i = ($_g1->arr[$_g] ?? null);
			#src/system/collections/generic/Dictionary.hx:142: lines 142-143
			++$_g;
			#src/system/collections/generic/Dictionary.hx:143: characters 32-56
			$this1 = $this->store;
			$key = Cs2Hx::Hash($i);
			#src/system/collections/generic/Dictionary.hx:143: characters 4-58
			$ret->add(new KeyValuePair($i, ($this1->data[$key] ?? null)));
		}
		#src/system/collections/generic/Dictionary.hx:144: characters 3-24
		return new ListIterator($ret->h);
	}
}

Boot::registerClass(Dictionary::class, 'system.collections.generic.Dictionary');
Boot::registerGetters('system\\collections\\generic\\Dictionary', [
	'Count' => true,
	'Values' => true,
	'Keys' => true
]);
