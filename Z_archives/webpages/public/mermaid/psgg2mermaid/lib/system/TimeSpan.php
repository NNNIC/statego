<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace system;

use \php\Boot;

class TimeSpan {
	/**
	 * @var float
	 */
	const MILLISECONDS_IN_DAY = 86400000;
	/**
	 * @var float
	 */
	const MILLISECONDS_IN_HOUR = 3600000;
	/**
	 * @var float
	 */
	const MILLISECONDS_IN_MINUTE = 60000;
	/**
	 * @var float
	 */
	const MILLISECONDS_IN_SECOND = 1000;

	/**
	 * @var TimeSpan
	 */
	static public $MaxValue;
	/**
	 * @var TimeSpan
	 */
	static public $MinValue;
	/**
	 * @var TimeSpan
	 */
	static public $Zero;

	/**
	 * @var int
	 */
	public $Days;
	/**
	 * @var int
	 */
	public $Hours;
	/**
	 * @var int
	 */
	public $Milliseconds;
	/**
	 * @var int
	 */
	public $Minutes;
	/**
	 * @var int
	 */
	public $Seconds;
	/**
	 * @var float
	 */
	public $TotalDays;
	/**
	 * @var float
	 */
	public $TotalHours;
	/**
	 * @var float
	 */
	public $TotalMilliseconds;
	/**
	 * @var float
	 */
	public $TotalMinutes;
	/**
	 * @var float
	 */
	public $TotalSeconds;
	/**
	 * @var float
	 */
	public $_totalMilliseconds;

	/**
	 * @param \Date $start
	 * @param \Date $end
	 * 
	 * @return TimeSpan
	 */
	public static function FromDates ($start, $end) {
		#src/system/TimeSpan.hx:118: characters 3-55
		return new TimeSpan($end->getTime() - $start->getTime());
	}

	/**
	 * @param float $days
	 * 
	 * @return TimeSpan
	 */
	public static function FromDays ($days) {
		#src/system/TimeSpan.hx:138: characters 3-50
		return new TimeSpan($days * 86400000);
	}

	/**
	 * @param float $hours
	 * 
	 * @return TimeSpan
	 */
	public static function FromHours ($hours) {
		#src/system/TimeSpan.hx:134: characters 3-52
		return new TimeSpan($hours * 3600000);
	}

	/**
	 * @param float $milliseconds
	 * 
	 * @return TimeSpan
	 */
	public static function FromMilliseconds ($milliseconds) {
		#src/system/TimeSpan.hx:122: characters 3-36
		return new TimeSpan($milliseconds);
	}

	/**
	 * @param float $minutes
	 * 
	 * @return TimeSpan
	 */
	public static function FromMinutes ($minutes) {
		#src/system/TimeSpan.hx:130: characters 3-56
		return new TimeSpan($minutes * 60000);
	}

	/**
	 * @param float $seconds
	 * 
	 * @return TimeSpan
	 */
	public static function FromSeconds ($seconds) {
		#src/system/TimeSpan.hx:126: characters 3-56
		return new TimeSpan($seconds * 1000);
	}

	/**
	 * @return void
	 */
	public static function cctor () {
		#src/system/TimeSpan.hx:25: characters 3-43
		TimeSpan::$MaxValue = new TimeSpan(922337203685477);
		#src/system/TimeSpan.hx:26: characters 3-44
		TimeSpan::$MinValue = new TimeSpan(-922337203685477);
	}

	/**
	 * @return TimeSpan
	 */
	public static function get_Zero () {
		#src/system/TimeSpan.hx:41: characters 3-25
		return new TimeSpan(0);
	}

	/**
	 * @param TimeSpan $t1
	 * @param TimeSpan $t2
	 * 
	 * @return bool
	 */
	public static function op_Equality ($t1, $t2) {
		#src/system/TimeSpan.hx:149: characters 3-54
		return Boot::equal($t1->_totalMilliseconds, $t2->_totalMilliseconds);
	}

	/**
	 * @param TimeSpan $t1
	 * @param TimeSpan $t2
	 * 
	 * @return bool
	 */
	public static function op_GreaterThan ($t1, $t2) {
		#src/system/TimeSpan.hx:157: characters 3-53
		return $t1->_totalMilliseconds > $t2->_totalMilliseconds;
	}

	/**
	 * @param TimeSpan $t1
	 * @param TimeSpan $t2
	 * 
	 * @return bool
	 */
	public static function op_GreaterThanOrEqual ($t1, $t2) {
		#src/system/TimeSpan.hx:165: characters 3-54
		return $t1->_totalMilliseconds >= $t2->_totalMilliseconds;
	}

	/**
	 * @param TimeSpan $t1
	 * @param TimeSpan $t2
	 * 
	 * @return bool
	 */
	public static function op_Inequality ($t1, $t2) {
		#src/system/TimeSpan.hx:153: characters 3-54
		return !Boot::equal($t1->_totalMilliseconds, $t2->_totalMilliseconds);
	}

	/**
	 * @param TimeSpan $t1
	 * @param TimeSpan $t2
	 * 
	 * @return bool
	 */
	public static function op_LessThan ($t1, $t2) {
		#src/system/TimeSpan.hx:161: characters 3-53
		return $t1->_totalMilliseconds < $t2->_totalMilliseconds;
	}

	/**
	 * @param TimeSpan $t1
	 * @param TimeSpan $t2
	 * 
	 * @return bool
	 */
	public static function op_LessThanOrEqual ($t1, $t2) {
		#src/system/TimeSpan.hx:169: characters 3-54
		return $t1->_totalMilliseconds <= $t2->_totalMilliseconds;
	}

	/**
	 * @param float $milliseconds
	 * 
	 * @return void
	 */
	public function __construct ($milliseconds = 0) {
		#src/system/TimeSpan.hx:36: characters 3-48
		if ($milliseconds === null) {
			$milliseconds = 0;
		}
		$this->_totalMilliseconds = (int)(\floor($milliseconds));
	}

	/**
	 * @param TimeSpan $span
	 * 
	 * @return TimeSpan
	 */
	public function Add ($span) {
		#src/system/TimeSpan.hx:114: characters 3-71
		return new TimeSpan($span->_totalMilliseconds + $this->_totalMilliseconds);
	}

	/**
	 * @param \Date $date
	 * 
	 * @return \Date
	 */
	public function AddDate ($date) {
		#src/system/TimeSpan.hx:108: characters 3-33
		$ms = $date->getTime();
		#src/system/TimeSpan.hx:109: characters 3-26
		$ms += $this->_totalMilliseconds;
		#src/system/TimeSpan.hx:110: characters 3-27
		return \Date::fromTime($ms);
	}

	/**
	 * @param TimeSpan $span
	 * 
	 * @return int
	 */
	public function CompareTo_TimeSpan ($span) {
		#src/system/TimeSpan.hx:52: characters 10-66
		return (int)(($this->_totalMilliseconds - $span->_totalMilliseconds));
	}

	/**
	 * @param TimeSpan $other
	 * 
	 * @return TimeSpan
	 */
	public function Subtract ($other) {
		#src/system/TimeSpan.hx:57: characters 10-85
		return new TimeSpan($this->_totalMilliseconds - $other->_totalMilliseconds);
	}

	/**
	 * @return int
	 */
	public function get_Days () {
		#src/system/TimeSpan.hx:68: characters 11-60
		return (int)(($this->_totalMilliseconds / 86400000));
	}

	/**
	 * @return int
	 */
	public function get_Hours () {
		#src/system/TimeSpan.hx:72: characters 4-66
		return (int)(($this->_totalMilliseconds / 3600000)) % 24;
	}

	/**
	 * @return int
	 */
	public function get_Milliseconds () {
		#src/system/TimeSpan.hx:84: characters 3-44
		return (int)($this->_totalMilliseconds) % 1000;
	}

	/**
	 * @return int
	 */
	public function get_Minutes () {
		#src/system/TimeSpan.hx:76: characters 3-67
		return (int)(($this->_totalMilliseconds / 60000)) % 60;
	}

	/**
	 * @return int
	 */
	public function get_Seconds () {
		#src/system/TimeSpan.hx:80: characters 3-67
		return (int)(($this->_totalMilliseconds / 1000)) % 60;
	}

	/**
	 * @return float
	 */
	public function get_TotalDays () {
		#src/system/TimeSpan.hx:88: characters 3-50
		return $this->_totalMilliseconds / 86400000;
	}

	/**
	 * @return float
	 */
	public function get_TotalHours () {
		#src/system/TimeSpan.hx:92: characters 3-51
		return $this->_totalMilliseconds / 3600000;
	}

	/**
	 * @return float
	 */
	public function get_TotalMilliseconds () {
		#src/system/TimeSpan.hx:104: characters 3-28
		return $this->_totalMilliseconds;
	}

	/**
	 * @return float
	 */
	public function get_TotalMinutes () {
		#src/system/TimeSpan.hx:96: characters 3-53
		return $this->_totalMilliseconds / 60000;
	}

	/**
	 * @return float
	 */
	public function get_TotalSeconds () {
		#src/system/TimeSpan.hx:100: characters 3-53
		return $this->_totalMilliseconds / 1000;
	}

	/**
	 * @return string
	 */
	public function toString () {
		#src/system/TimeSpan.hx:31: characters 3-44
		return \Std::string($this->_totalMilliseconds);
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(TimeSpan::class, 'system.TimeSpan');
Boot::registerGetters('system\\TimeSpan', [
	'Zero' => true,
	'TotalMinutes' => true,
	'TotalHours' => true,
	'TotalDays' => true,
	'TotalSeconds' => true,
	'Seconds' => true,
	'Hours' => true,
	'Days' => true,
	'TotalMilliseconds' => true,
	'Minutes' => true,
	'Milliseconds' => true
]);
