<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace system\text;

use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxString;
use \system\NotImplementedException;

class StringBuilder {
	/**
	 * @var int
	 */
	public $Capacity;
	/**
	 * @var string
	 */
	public $buffer;

	/**
	 * @param mixed $initial
	 * 
	 * @return void
	 */
	public function __construct ($initial = null) {
		#src/system/text/StringBuilder.hx:12: lines 12-17
		if ($initial === null) {
			#src/system/text/StringBuilder.hx:13: characters 4-15
			$this->buffer = "";
		} else if (is_string($initial)) {
			#src/system/text/StringBuilder.hx:15: characters 4-20
			$this->buffer = $initial;
		} else {
			#src/system/text/StringBuilder.hx:17: characters 4-15
			$this->buffer = "";
		}
	}

	/**
	 * @param string $append
	 * 
	 * @return StringBuilder
	 */
	public function Append ($append) {
		#src/system/text/StringBuilder.hx:49: lines 49-50
		if ($append !== null) {
			#src/system/text/StringBuilder.hx:50: characters 4-20
			$this->buffer = ($this->buffer??'null') . ($append??'null');
		}
		#src/system/text/StringBuilder.hx:51: characters 3-14
		return $this;
	}

	/**
	 * @param string $append
	 * 
	 * @return StringBuilder
	 */
	public function AppendLine ($append = "") {
		#src/system/text/StringBuilder.hx:77: lines 77-81
		if ($append === null) {
			$append = "";
		}
		#src/system/text/StringBuilder.hx:78: characters 3-17
		if ($append !== null) {
			$this->buffer = ($this->buffer??'null') . ($append??'null');
		}
		#src/system/text/StringBuilder.hx:79: characters 3-15
		$this->buffer = ($this->buffer??'null') . "\x0A";
		#src/system/text/StringBuilder.hx:80: characters 3-14
		return $this;
	}

	/**
	 * @param int $char
	 * 
	 * @return StringBuilder
	 */
	public function Append_Char ($char) {
		#src/system/text/StringBuilder.hx:67: characters 3-36
		$append = \mb_chr($char);
		if ($append !== null) {
			$this->buffer = ($this->buffer??'null') . ($append??'null');
		}
		#src/system/text/StringBuilder.hx:68: characters 3-14
		return $this;
	}

	/**
	 * @param int $char
	 * @param int $repeatCount
	 * 
	 * @return void
	 */
	public function Append_Char_Int32 ($char, $repeatCount) {
		#src/system/text/StringBuilder.hx:72: characters 13-17
		$_g = 0;
		#src/system/text/StringBuilder.hx:72: characters 17-28
		$_g1 = $repeatCount;
		#src/system/text/StringBuilder.hx:72: lines 72-73
		while ($_g < $_g1) {
			#src/system/text/StringBuilder.hx:72: characters 13-28
			$i = $_g++;
			#src/system/text/StringBuilder.hx:73: characters 4-21
			$append = \mb_chr($char);
			if ($append !== null) {
				$this->buffer = ($this->buffer??'null') . ($append??'null');
			}
		}
	}

	/**
	 * @param float $d
	 * 
	 * @return StringBuilder
	 */
	public function Append_Double ($d) {
		#src/system/text/StringBuilder.hx:56: characters 3-9
		$tmp = $this;
		#src/system/text/StringBuilder.hx:56: characters 3-26
		$tmp->buffer = ($tmp->buffer??'null') . (\Std::string($d)??'null');
		#src/system/text/StringBuilder.hx:57: characters 3-14
		return $this;
	}

	/**
	 * @param int $i
	 * 
	 * @return void
	 */
	public function Append_Int32 ($i) {
		#src/system/text/StringBuilder.hx:85: characters 3-24
		$append = \Std::string($i);
		if ($append !== null) {
			$this->buffer = ($this->buffer??'null') . ($append??'null');
		}
	}

	/**
	 * @param string $append
	 * 
	 * @return StringBuilder
	 */
	public function Append_String ($append) {
		#src/system/text/StringBuilder.hx:43: characters 3-17
		if ($append !== null) {
			$this->buffer = ($this->buffer??'null') . ($append??'null');
		}
		#src/system/text/StringBuilder.hx:44: characters 3-14
		return $this;
	}

	/**
	 * @param string $append
	 * @param int $startAt
	 * @param int $len
	 * 
	 * @return void
	 */
	public function Append_String_Int32_Int32 ($append, $startAt, $len) {
		#src/system/text/StringBuilder.hx:90: characters 3-38
		$append1 = \mb_substr($append, $startAt, $len);
		if ($append1 !== null) {
			$this->buffer = ($this->buffer??'null') . ($append1??'null');
		}
	}

	/**
	 * @return void
	 */
	public function Clear () {
		#src/system/text/StringBuilder.hx:105: characters 3-14
		$this->buffer = "";
	}

	/**
	 * @param int $index
	 * 
	 * @return int
	 */
	public function GetValue_Int32 ($index) {
		#src/system/text/StringBuilder.hx:100: characters 3-34
		return HxString::charCodeAt($this->buffer, $index);
	}

	/**
	 * @param int $location
	 * @param int $char
	 * 
	 * @return void
	 */
	public function InsertChar ($location, $char) {
		#src/system/text/StringBuilder.hx:62: characters 3-59
		$this->Insert_Int32_String($location, \mb_chr($char));
	}

	/**
	 * @param int $location
	 * @param int $c
	 * 
	 * @return void
	 */
	public function Insert_Int32_Char ($location, $c) {
		#src/system/text/StringBuilder.hx:29: characters 3-56
		$this->Insert_Int32_String($location, \mb_chr($c));
	}

	/**
	 * @param int $location
	 * @param string $ins
	 * 
	 * @return void
	 */
	public function Insert_Int32_String ($location, $ins) {
		#src/system/text/StringBuilder.hx:34: characters 3-70
		$this->buffer = (\mb_substr($this->buffer, 0, $location)??'null') . ($ins??'null') . (\mb_substr($this->buffer, $location, null)??'null');
	}

	/**
	 * @param int $startIndex
	 * @param int $length
	 * 
	 * @return void
	 */
	public function Remove ($startIndex, $length) {
		#src/system/text/StringBuilder.hx:95: characters 3-8
		throw Exception::thrown(new NotImplementedException());
	}

	/**
	 * @return int
	 */
	public function get_Length () {
		#src/system/text/StringBuilder.hx:24: characters 3-23
		return mb_strlen($this->buffer);
	}

	/**
	 * @return string
	 */
	public function toString () {
		#src/system/text/StringBuilder.hx:39: characters 3-16
		return $this->buffer;
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(StringBuilder::class, 'system.text.StringBuilder');
Boot::registerGetters('system\\text\\StringBuilder', [
	'Length' => true
]);
