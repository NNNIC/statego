<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace system;

use \php\Boot;
use \system\collections\generic\IEnumerable;
use \system\text\StringBuilder;
use \system\collections\generic\IComparer;
use \php\_Boot\HxString;
use \haxe\Exception as HaxeException;
use \haxe\ds\IntMap;

class Cs2Hx {
	/**
	 * @var int
	 */
	static public $_identity = 0;
	/**
	 * @var IntMap
	 */
	static public $charOrDigitMap;
	/**
	 * @var IntMap
	 */
	static public $digitMap;

	/**
	 * @param int $i
	 * 
	 * @return int
	 */
	public static function AbsInt ($i) {
		#src/system/Cs2Hx.hx:320: characters 10-25
		if ($i >= 0) {
			#src/system/Cs2Hx.hx:320: characters 19-20
			return $i;
		} else {
			#src/system/Cs2Hx.hx:320: characters 23-25
			return -$i;
		}
	}

	/**
	 * @param \Array_hx $b
	 * @param \Array_hx $a
	 * 
	 * @return void
	 */
	public static function AddRange ($b, $a) {
		#src/system/Cs2Hx.hx:62: lines 62-63
		$_g = 0;
		while ($_g < $a->length) {
			#src/system/Cs2Hx.hx:62: characters 8-9
			$e = ($a->arr[$_g] ?? null);
			#src/system/Cs2Hx.hx:62: lines 62-63
			++$_g;
			#src/system/Cs2Hx.hx:63: characters 4-13
			$b->arr[$b->length++] = $e;
		}
	}

	/**
	 * @param bool $b1
	 * @param bool $b2
	 * 
	 * @return bool
	 */
	public static function BoolCompare ($b1, $b2) {
		#src/system/Cs2Hx.hx:517: characters 3-18
		return $b1 === $b2;
	}

	/**
	 * @param int $i
	 * 
	 * @return string
	 */
	public static function ByteToHex ($i) {
		#src/system/Cs2Hx.hx:315: characters 3-56
		return (Cs2Hx::CharToHex((int)(($i / 16)))??'null') . (Cs2Hx::CharToHex($i % 16)??'null');
	}

	/**
	 * @param int $i
	 * 
	 * @return string
	 */
	public static function CharToHex ($i) {
		#src/system/Cs2Hx.hx:325: lines 325-337
		if ($i === 10) {
			#src/system/Cs2Hx.hx:327: characters 13-23
			return "A";
		} else if ($i === 11) {
			#src/system/Cs2Hx.hx:328: characters 13-23
			return "B";
		} else if ($i === 12) {
			#src/system/Cs2Hx.hx:329: characters 13-23
			return "C";
		} else if ($i === 13) {
			#src/system/Cs2Hx.hx:330: characters 13-23
			return "D";
		} else if ($i === 14) {
			#src/system/Cs2Hx.hx:331: characters 13-23
			return "E";
		} else if ($i === 15) {
			#src/system/Cs2Hx.hx:332: characters 13-23
			return "F";
		} else {
			#src/system/Cs2Hx.hx:334: lines 334-335
			if (($i < 0) || ($i >= 16)) {
				#src/system/Cs2Hx.hx:335: characters 6-11
				throw HaxeException::thrown(new Exception("ToHex out of range"));
			}
			#src/system/Cs2Hx.hx:336: characters 5-25
			return \Std::string($i);
		}
	}

	/**
	 * @param int $c
	 * 
	 * @return string
	 */
	public static function CharToString ($c) {
		#src/system/Cs2Hx.hx:294: characters 3-32
		return \mb_chr($c);
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return void
	 */
	public static function Clear ($a) {
		#src/system/Cs2Hx.hx:121: characters 3-24
		$a->splice(0, $a->length);
	}

	/**
	 * @param mixed $a
	 * @param mixed $b
	 * 
	 * @return mixed
	 */
	public static function Coalesce ($a, $b) {
		#src/system/Cs2Hx.hx:116: characters 10-27
		if ($a === null) {
			#src/system/Cs2Hx.hx:116: characters 22-23
			return $b;
		} else {
			#src/system/Cs2Hx.hx:116: characters 26-27
			return $a;
		}
	}

	/**
	 * @param \Array_hx $a
	 * @param mixed $item
	 * 
	 * @return bool
	 */
	public static function Contains ($a, $item) {
		#src/system/Cs2Hx.hx:143: characters 3-32
		return Cs2Hx::IndexOf($a, $item) !== -1;
	}

	/**
	 * @return string
	 */
	public static function EmptyGuid () {
		#src/system/Cs2Hx.hx:446: characters 3-44
		return "00000000000000000000000000000000";
	}

	/**
	 * @param string $str1
	 * @param string $str2
	 * 
	 * @return bool
	 */
	public static function EndsWith ($str1, $str2) {
		#src/system/Cs2Hx.hx:310: characters 3-56
		return \mb_substr($str1, mb_strlen($str1) - mb_strlen($str2), null) === $str2;
	}

	/**
	 * @param string $str
	 * @param string $endsWith
	 * @param int $type
	 * 
	 * @return bool
	 */
	public static function EndsWith_String_StringComparison ($str, $endsWith, $type) {
		#src/system/Cs2Hx.hx:138: characters 10-15
		throw HaxeException::thrown(new NotImplementedException());
	}

	/**
	 * @param string $str1
	 * @param string $str2
	 * @param int $type
	 * 
	 * @return bool
	 */
	public static function Equals_String_StringComparison ($str1, $str2, $type) {
		#src/system/Cs2Hx.hx:131: lines 131-134
		if ($type === 5) {
			#src/system/Cs2Hx.hx:132: characters 11-83
			if (($str1 !== null) && ($str2 !== null)) {
				#src/system/Cs2Hx.hx:132: characters 43-83
				return \mb_strtolower($str1) === \mb_strtolower($str2);
			} else {
				#src/system/Cs2Hx.hx:132: characters 11-83
				return false;
			}
		} else {
			#src/system/Cs2Hx.hx:134: characters 4-23
			return $str1 === $str2;
		}
	}

	/**
	 * @param \Array_hx $a
	 * @param \Closure $match
	 * 
	 * @return int
	 */
	public static function FindIndex ($a, $match) {
		#src/system/Cs2Hx.hx:31: characters 3-17
		$i = 0;
		#src/system/Cs2Hx.hx:32: lines 32-37
		$_g = 0;
		while ($_g < $a->length) {
			#src/system/Cs2Hx.hx:32: characters 8-9
			$e = ($a->arr[$_g] ?? null);
			#src/system/Cs2Hx.hx:32: lines 32-37
			++$_g;
			#src/system/Cs2Hx.hx:34: lines 34-35
			if ($match($e)) {
				#src/system/Cs2Hx.hx:35: characters 5-13
				return $i;
			}
			#src/system/Cs2Hx.hx:36: characters 4-7
			++$i;
		}
		#src/system/Cs2Hx.hx:38: characters 3-12
		return -1;
	}

	/**
	 * @param \Array_hx $a
	 * @param \Closure $func
	 * 
	 * @return void
	 */
	public static function ForEach ($a, $func) {
		#src/system/Cs2Hx.hx:72: lines 72-73
		$_g = 0;
		while ($_g < $a->length) {
			#src/system/Cs2Hx.hx:72: characters 8-9
			$e = ($a->arr[$_g] ?? null);
			#src/system/Cs2Hx.hx:72: lines 72-73
			++$_g;
			#src/system/Cs2Hx.hx:73: characters 4-11
			$func($e);
		}
	}

	/**
	 * @param IEnumerable $obj
	 * 
	 * @return \Array_hx
	 */
	public static function GetEnumeratorNullCheck ($obj) {
		#src/system/Cs2Hx.hx:498: lines 498-501
		if ($obj === null) {
			#src/system/Cs2Hx.hx:499: characters 4-15
			return null;
		} else {
			#src/system/Cs2Hx.hx:501: characters 4-30
			return $obj->GetEnumerator();
		}
	}

	/**
	 * @param mixed $c
	 * 
	 * @return TypeCS
	 */
	public static function GetType ($c) {
		#src/system/Cs2Hx.hx:78: characters 3-30
		return new TypeCS($c);
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public static function GuidParse ($s) {
		#src/system/Cs2Hx.hx:21: characters 3-11
		return $s;
	}

	/**
	 * @param mixed $o
	 * 
	 * @return string
	 */
	public static function Hash ($o) {
		#src/system/Cs2Hx.hx:261: lines 261-262
		if ($o === null) {
			#src/system/Cs2Hx.hx:262: characters 4-13
			return "";
		}
		#src/system/Cs2Hx.hx:263: lines 263-264
		if (is_string($o)) {
			#src/system/Cs2Hx.hx:264: characters 4-12
			return $o;
		}
		#src/system/Cs2Hx.hx:265: lines 265-266
		if (Boot::isOfType($o, Boot::getClass('Int'))) {
			#src/system/Cs2Hx.hx:266: characters 4-24
			return \Std::string($o);
		}
		#src/system/Cs2Hx.hx:272: lines 272-273
		if (Boot::dynamicField($o, '__csid__')) {
			#src/system/Cs2Hx.hx:273: characters 4-21
			return Boot::dynamicField($o, '__csid__');
		}
		#src/system/Cs2Hx.hx:274: characters 3-39
		$newID = \Std::string(++Cs2Hx::$_identity);
		#src/system/Cs2Hx.hx:275: characters 3-21
		$o->__csid__ = $newID;
		#src/system/Cs2Hx.hx:276: characters 3-15
		return $newID;
	}

	/**
	 * @param \Array_hx $a
	 * @param mixed $item
	 * 
	 * @return int
	 */
	public static function IndexOf ($a, $item) {
		#src/system/Cs2Hx.hx:231: characters 13-17
		$_g = 0;
		#src/system/Cs2Hx.hx:231: characters 17-25
		$_g1 = $a->length;
		#src/system/Cs2Hx.hx:231: lines 231-233
		while ($_g < $_g1) {
			#src/system/Cs2Hx.hx:231: characters 13-25
			$i = $_g++;
			#src/system/Cs2Hx.hx:232: lines 232-233
			if (Boot::equal(($a->arr[$i] ?? null), $item)) {
				#src/system/Cs2Hx.hx:233: characters 5-13
				return $i;
			}
		}
		#src/system/Cs2Hx.hx:234: characters 3-12
		return -1;
	}

	/**
	 * @param string $s
	 * @param \Array_hx $chars
	 * @param int $startat
	 * 
	 * @return int
	 */
	public static function IndexOfAny__Int32 ($s, $chars, $startat) {
		#src/system/Cs2Hx.hx:84: characters 13-20
		$_g = $startat;
		#src/system/Cs2Hx.hx:84: characters 23-31
		$_g1 = mb_strlen($s);
		#src/system/Cs2Hx.hx:84: lines 84-90
		while ($_g < $_g1) {
			#src/system/Cs2Hx.hx:84: characters 13-31
			$i = $_g++;
			#src/system/Cs2Hx.hx:86: characters 4-29
			$ec = HxString::charCodeAt($s, $i);
			#src/system/Cs2Hx.hx:87: lines 87-89
			$_g2 = 0;
			while ($_g2 < $chars->length) {
				#src/system/Cs2Hx.hx:87: characters 9-10
				$c = ($chars->arr[$_g2] ?? null);
				#src/system/Cs2Hx.hx:87: lines 87-89
				++$_g2;
				#src/system/Cs2Hx.hx:88: lines 88-89
				if ($ec === $c) {
					#src/system/Cs2Hx.hx:89: characters 6-14
					return $i;
				}
			}
		}
		#src/system/Cs2Hx.hx:92: characters 3-12
		return -1;
	}

	/**
	 * @param string $s
	 * @param int $c
	 * @param int $startAt
	 * 
	 * @return int
	 */
	public static function IndexOfChar ($s, $c, $startAt = 0) {
		#src/system/Cs2Hx.hx:153: characters 3-52
		if ($startAt === null) {
			$startAt = 0;
		}
		return HxString::indexOf($s, \mb_chr($c), $startAt);
	}

	/**
	 * @param \Array_hx $b
	 * @param int $index
	 * @param \Array_hx $a
	 * 
	 * @return void
	 */
	public static function InsertRange ($b, $index, $a) {
		#src/system/Cs2Hx.hx:67: lines 67-68
		$_g = 0;
		while ($_g < $a->length) {
			#src/system/Cs2Hx.hx:67: characters 8-9
			$e = ($a->arr[$_g] ?? null);
			#src/system/Cs2Hx.hx:67: lines 67-68
			++$_g;
			#src/system/Cs2Hx.hx:68: characters 4-24
			$b->insert($index++, $e);
		}
	}

	/**
	 * @param int $ch
	 * 
	 * @return bool
	 */
	public static function IsDigit ($ch) {
		#src/system/Cs2Hx.hx:247: lines 247-248
		if (Cs2Hx::$digitMap === null) {
			#src/system/Cs2Hx.hx:248: characters 15-36
			$hash = new IntMap();
			$i = 0;
			while ($i < mb_strlen("0123456789")) {
				$hash->data[HxString::charCodeAt("0123456789", $i++)] = true;
			}
			#src/system/Cs2Hx.hx:248: characters 4-36
			Cs2Hx::$digitMap = $hash;
		}
		#src/system/Cs2Hx.hx:250: characters 10-29
		return \array_key_exists($ch, Cs2Hx::$digitMap->data);
	}

	/**
	 * @param float $f
	 * 
	 * @return bool
	 */
	public static function IsInfinity ($f) {
		#src/system/Cs2Hx.hx:255: characters 3-27
		return !\is_finite($f);
	}

	/**
	 * @param int $ch
	 * 
	 * @return bool
	 */
	public static function IsLetterOrDigit ($ch) {
		#src/system/Cs2Hx.hx:218: lines 218-219
		if (Cs2Hx::$charOrDigitMap === null) {
			#src/system/Cs2Hx.hx:219: characters 21-94
			$hash = new IntMap();
			$i = 0;
			while ($i < mb_strlen("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890")) {
				$hash->data[HxString::charCodeAt("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890", $i++)] = true;
			}
			#src/system/Cs2Hx.hx:219: characters 4-94
			Cs2Hx::$charOrDigitMap = $hash;
		}
		#src/system/Cs2Hx.hx:221: characters 10-35
		return \array_key_exists($ch, Cs2Hx::$charOrDigitMap->data);
	}

	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return bool
	 */
	public static function IsLetterOrDigitAtIndex ($str, $index) {
		#src/system/Cs2Hx.hx:226: characters 3-48
		return Cs2Hx::IsLetterOrDigit(HxString::charCodeAt($str, $index));
	}

	/**
	 * @param float $a
	 * 
	 * @return bool
	 */
	public static function IsNaN ($a) {
		#src/system/Cs2Hx.hx:126: characters 3-23
		return \is_nan($a);
	}

	/**
	 * @param string $str
	 * 
	 * @return bool
	 */
	public static function IsNullOrEmpty ($str) {
		#src/system/Cs2Hx.hx:289: characters 10-40
		if ($str !== null) {
			#src/system/Cs2Hx.hx:289: characters 25-40
			return mb_strlen($str) === 0;
		} else {
			#src/system/Cs2Hx.hx:289: characters 10-40
			return true;
		}
	}

	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	public static function IsNullOrWhiteSpace ($s) {
		#src/system/Cs2Hx.hx:97: characters 10-42
		if ($s !== null) {
			#src/system/Cs2Hx.hx:97: characters 23-42
			return mb_strlen(Cs2Hx::Trim($s)) === 0;
		} else {
			#src/system/Cs2Hx.hx:97: characters 10-42
			return true;
		}
	}

	/**
	 * @param int $char
	 * 
	 * @return bool
	 */
	public static function IsUpper ($char) {
		#src/system/Cs2Hx.hx:451: characters 10-15
		throw HaxeException::thrown(new NotImplementedException());
	}

	/**
	 * @param string $sep
	 * @param \Array_hx $a
	 * 
	 * @return string
	 */
	public static function Join ($sep, $a) {
		#src/system/Cs2Hx.hx:202: characters 3-21
		return $a->join($sep);
	}

	/**
	 * @param \Array_hx $a
	 * @param mixed $item
	 * 
	 * @return int
	 */
	public static function LastIndexOf ($a, $item) {
		#src/system/Cs2Hx.hx:238: characters 13-17
		$_g = 0;
		#src/system/Cs2Hx.hx:238: characters 17-25
		$_g1 = $a->length;
		#src/system/Cs2Hx.hx:238: lines 238-240
		while ($_g < $_g1) {
			#src/system/Cs2Hx.hx:238: characters 13-25
			$i = $_g++;
			#src/system/Cs2Hx.hx:239: lines 239-240
			if (Boot::equal(($a->arr[$a->length - $i - 1] ?? null), $item)) {
				#src/system/Cs2Hx.hx:240: characters 5-28
				return $a->length - $i - 1;
			}
		}
		#src/system/Cs2Hx.hx:241: characters 3-12
		return -1;
	}

	/**
	 * @param string $str
	 * 
	 * @return IntMap
	 */
	public static function MakeMap ($str) {
		#src/system/Cs2Hx.hx:207: characters 3-50
		$hash = new IntMap();
		#src/system/Cs2Hx.hx:209: characters 3-13
		$i = 0;
		#src/system/Cs2Hx.hx:210: lines 210-211
		while ($i < mb_strlen($str)) {
			#src/system/Cs2Hx.hx:211: characters 4-39
			$hash->data[HxString::charCodeAt($str, $i++)] = true;
		}
		#src/system/Cs2Hx.hx:212: characters 3-14
		return $hash;
	}

	/**
	 * @param int $f
	 * @param int $s
	 * 
	 * @return int
	 */
	public static function MathMin ($f, $s) {
		#src/system/Cs2Hx.hx:281: lines 281-284
		if ($f > $s) {
			#src/system/Cs2Hx.hx:282: characters 4-12
			return $s;
		} else {
			#src/system/Cs2Hx.hx:284: characters 4-12
			return $f;
		}
	}

	/**
	 * @return string
	 */
	public static function NewGuid () {
		#src/system/Cs2Hx.hx:434: characters 3-23
		$ret = "";
		#src/system/Cs2Hx.hx:436: characters 12-16
		$_g = 0;
		#src/system/Cs2Hx.hx:436: lines 436-437
		while ($_g < 32) {
			#src/system/Cs2Hx.hx:436: characters 12-18
			$i = $_g++;
			#src/system/Cs2Hx.hx:437: characters 4-42
			$ret = ($ret??'null') . (Cs2Hx::CharToHex(\mt_rand(0, 15))??'null');
		}
		#src/system/Cs2Hx.hx:439: lines 439-440
		if (mb_strlen($ret) !== 32) {
			#src/system/Cs2Hx.hx:440: characters 4-9
			throw HaxeException::thrown(new Exception());
		}
		#src/system/Cs2Hx.hx:441: characters 3-13
		return $ret;
	}

	/**
	 * @param int $ch
	 * @param int $repeat
	 * 
	 * @return string
	 */
	public static function NewString ($ch, $repeat) {
		#src/system/Cs2Hx.hx:506: characters 3-33
		$buf = new StringBuilder();
		#src/system/Cs2Hx.hx:507: characters 13-17
		$_g = 0;
		#src/system/Cs2Hx.hx:507: characters 17-23
		$_g1 = $repeat;
		#src/system/Cs2Hx.hx:507: lines 507-508
		while ($_g < $_g1) {
			#src/system/Cs2Hx.hx:507: characters 13-23
			$i = $_g++;
			#src/system/Cs2Hx.hx:508: characters 4-23
			$append = \mb_chr($ch);
			if ($append !== null) {
				$buf->buffer = ($buf->buffer??'null') . ($append??'null');
			}
		}
		#src/system/Cs2Hx.hx:509: characters 3-24
		return $buf->buffer;
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	public static function NullCheck ($str) {
		#src/system/Cs2Hx.hx:523: characters 10-32
		if ($str === null) {
			#src/system/Cs2Hx.hx:523: characters 24-26
			return "";
		} else {
			#src/system/Cs2Hx.hx:523: characters 29-32
			return $str;
		}
	}

	/**
	 * @param string $str
	 * 
	 * @return bool
	 */
	public static function ParseBool ($str) {
		#src/system/Cs2Hx.hx:159: characters 11-28
		$__hx__switch = (\mb_strtolower($str));
		if ($__hx__switch === "false") {
			#src/system/Cs2Hx.hx:162: characters 18-30
			return false;
		} else if ($__hx__switch === "true") {
			#src/system/Cs2Hx.hx:161: characters 17-28
			return true;
		} else {
			#src/system/Cs2Hx.hx:164: characters 5-10
			throw HaxeException::thrown(new Exception("parseBool passed " . ($str??'null')));
		}
	}

	/**
	 * @param string $str
	 * 
	 * @return int
	 */
	public static function ParseOrZero ($str) {
		#src/system/Cs2Hx.hx:15: characters 3-29
		$r = \Std::parseInt($str);
		#src/system/Cs2Hx.hx:16: characters 10-27
		if ($r === null) {
			#src/system/Cs2Hx.hx:16: characters 22-23
			return 0;
		} else {
			#src/system/Cs2Hx.hx:16: characters 26-27
			return $r;
		}
	}

	/**
	 * @param \Array_hx $a
	 * @param \Closure $match
	 * 
	 * @return int
	 */
	public static function RemoveAll ($a, $match) {
		#src/system/Cs2Hx.hx:43: characters 3-22
		$numRemoved = 0;
		#src/system/Cs2Hx.hx:44: characters 3-24
		$i = $a->length - 1;
		#src/system/Cs2Hx.hx:45: lines 45-55
		while ($i >= 0) {
			#src/system/Cs2Hx.hx:47: characters 4-17
			$e = ($a->arr[$i] ?? null);
			#src/system/Cs2Hx.hx:48: lines 48-54
			if ($match($e)) {
				#src/system/Cs2Hx.hx:50: characters 5-19
				$a->splice($i, 1);
				#src/system/Cs2Hx.hx:51: characters 5-17
				++$numRemoved;
			} else {
				#src/system/Cs2Hx.hx:54: characters 5-8
				--$i;
			}
		}
		#src/system/Cs2Hx.hx:57: characters 3-20
		return $numRemoved;
	}

	/**
	 * @param string $s
	 * @param int $startIndex
	 * @param int $count
	 * 
	 * @return string
	 */
	public static function Remove_Int32_Int32 ($s, $startIndex, $count) {
		#src/system/Cs2Hx.hx:26: characters 3-68
		return (\mb_substr($s, 0, $startIndex)??'null') . (\mb_substr($s, $startIndex + $count - 1, null)??'null');
	}

	/**
	 * @param string $s
	 * @param int $c1
	 * @param int $c2
	 * 
	 * @return string
	 */
	public static function Replace ($s, $c1, $c2) {
		#src/system/Cs2Hx.hx:102: characters 3-69
		return \StringTools::replace($s, \mb_chr($c1), \mb_chr($c2));
	}

	/**
	 * @param float $f
	 * @param float $s
	 * 
	 * @return int
	 */
	public static function SortFloats ($f, $s) {
		#src/system/Cs2Hx.hx:415: characters 3-24
		return (int)(($f - $s));
	}

	/**
	 * @param int $f
	 * @param int $s
	 * 
	 * @return int
	 */
	public static function SortInts ($f, $s) {
		#src/system/Cs2Hx.hx:410: characters 3-15
		return $f - $s;
	}

	/**
	 * @param \Array_hx $array
	 * @param int $startAt
	 * @param int $len
	 * @param IComparer $comp
	 * 
	 * @return void
	 */
	public static function Sort_Int32_Int32_IComparer ($array, $startAt, $len, $comp) {
		#src/system/Cs2Hx.hx:420: characters 3-28
		$tmp = new \Array_hx();
		#src/system/Cs2Hx.hx:422: characters 13-20
		$_g = $startAt;
		#src/system/Cs2Hx.hx:422: characters 23-38
		$_g1 = $len + $startAt;
		#src/system/Cs2Hx.hx:422: lines 422-423
		while ($_g < $_g1) {
			#src/system/Cs2Hx.hx:422: characters 13-38
			$i = $_g++;
			#src/system/Cs2Hx.hx:423: characters 13-21
			$array1 = ($array->arr[$i] ?? null);
			#src/system/Cs2Hx.hx:423: characters 4-22
			$tmp->arr[$tmp->length++] = $array1;
		}
		#src/system/Cs2Hx.hx:425: characters 3-68
		\usort($tmp->arr, function ($a, $b) use (&$comp) {
			#src/system/Cs2Hx.hx:425: characters 38-63
			return $comp->Compare($a, $b);
		});
		#src/system/Cs2Hx.hx:427: characters 13-17
		$_g = 0;
		#src/system/Cs2Hx.hx:427: characters 17-27
		$_g1 = $tmp->length;
		#src/system/Cs2Hx.hx:427: lines 427-428
		while ($_g < $_g1) {
			#src/system/Cs2Hx.hx:427: characters 13-27
			$i = $_g++;
			#src/system/Cs2Hx.hx:428: characters 4-31
			$array->offsetSet($i + $startAt, ($tmp->arr[$i] ?? null));
		}
	}

	/**
	 * @param string $s
	 * @param \Array_hx $chars
	 * @param int $options
	 * 
	 * @return \Array_hx
	 */
	public static function Split ($s, $chars, $options = 0) {
		#src/system/Cs2Hx.hx:179: lines 179-198
		if ($options === null) {
			$options = 0;
		}
		#src/system/Cs2Hx.hx:180: characters 3-30
		$charString = "";
		#src/system/Cs2Hx.hx:182: lines 182-183
		$_g = 0;
		while ($_g < $chars->length) {
			#src/system/Cs2Hx.hx:182: characters 8-9
			$c = ($chars->arr[$_g] ?? null);
			#src/system/Cs2Hx.hx:182: lines 182-183
			++$_g;
			#src/system/Cs2Hx.hx:183: characters 4-40
			$charString = ($charString??'null') . (\mb_chr($c)??'null');
		}
		#src/system/Cs2Hx.hx:185: characters 3-35
		$split = HxString::split($s, $charString);
		#src/system/Cs2Hx.hx:187: lines 187-197
		if ($options === 1) {
			#src/system/Cs2Hx.hx:189: characters 4-34
			$ret = new \Array_hx();
			#src/system/Cs2Hx.hx:190: lines 190-192
			$_g = 0;
			while ($_g < $split->length) {
				#src/system/Cs2Hx.hx:190: characters 9-10
				$e = ($split->arr[$_g] ?? null);
				#src/system/Cs2Hx.hx:190: lines 190-192
				++$_g;
				#src/system/Cs2Hx.hx:191: lines 191-192
				if (!(($e === null) || (mb_strlen($e) === 0))) {
					#src/system/Cs2Hx.hx:192: characters 6-17
					$ret->arr[$ret->length++] = $e;
				}
			}
			#src/system/Cs2Hx.hx:194: characters 4-14
			return $ret;
		} else {
			#src/system/Cs2Hx.hx:197: characters 4-16
			return $split;
		}
	}

	/**
	 * @param string $s
	 * @param \Array_hx $chars
	 * @param int $options
	 * 
	 * @return \Array_hx
	 */
	public static function Split__StringSplitOptions ($s, $chars, $options) {
		#src/system/Cs2Hx.hx:175: characters 3-34
		return Cs2Hx::Split($s, $chars, $options);
	}

	/**
	 * @param string $str1
	 * @param string $str2
	 * 
	 * @return bool
	 */
	public static function StartsWith ($str1, $str2) {
		#src/system/Cs2Hx.hx:299: characters 3-45
		return \mb_substr($str1, 0, mb_strlen($str2)) === $str2;
	}

	/**
	 * @param string $str1
	 * @param string $str2
	 * @param int $comp
	 * 
	 * @return bool
	 */
	public static function StartsWith_String_StringComparison ($str1, $str2, $comp) {
		#src/system/Cs2Hx.hx:303: characters 10-15
		throw HaxeException::thrown(new NotImplementedException());
	}

	/**
	 * @param string $haystack
	 * @param string $needle
	 * 
	 * @return bool
	 */
	public static function StringContains ($haystack, $needle) {
		#src/system/Cs2Hx.hx:148: characters 3-40
		return HxString::indexOf($haystack, $needle) !== -1;
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return \Array_hx
	 */
	public static function ToArray ($a) {
		#src/system/Cs2Hx.hx:170: characters 3-11
		return $a;
	}

	/**
	 * @param string $s
	 * 
	 * @return \Array_hx
	 */
	public static function ToCharArray ($s) {
		#src/system/Cs2Hx.hx:107: characters 3-30
		$ret = new \Array_hx();
		#src/system/Cs2Hx.hx:109: characters 13-17
		$_g = 0;
		#src/system/Cs2Hx.hx:109: characters 17-25
		$_g1 = mb_strlen($s);
		#src/system/Cs2Hx.hx:109: lines 109-110
		while ($_g < $_g1) {
			#src/system/Cs2Hx.hx:109: characters 13-25
			$i = $_g++;
			#src/system/Cs2Hx.hx:110: characters 4-29
			$x = HxString::charCodeAt($s, $i);
			$ret->arr[$ret->length++] = $x;
		}
		#src/system/Cs2Hx.hx:111: characters 3-13
		return $ret;
	}

	/**
	 * @param int $char
	 * 
	 * @return int
	 */
	public static function ToLower ($char) {
		#src/system/Cs2Hx.hx:455: characters 10-15
		throw HaxeException::thrown(new NotImplementedException());
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	public static function Trim ($str) {
		#src/system/Cs2Hx.hx:361: lines 361-362
		if (mb_strlen($str) === 0) {
			#src/system/Cs2Hx.hx:362: characters 4-14
			return $str;
		}
		#src/system/Cs2Hx.hx:364: characters 3-17
		$i = 0;
		#src/system/Cs2Hx.hx:365: lines 365-366
		while ((HxString::charCodeAt($str, $i) < 33) && ($i < mb_strlen($str))) {
			#src/system/Cs2Hx.hx:366: characters 4-7
			++$i;
		}
		#src/system/Cs2Hx.hx:368: characters 3-30
		$e = mb_strlen($str) - 1;
		#src/system/Cs2Hx.hx:369: lines 369-370
		while ((HxString::charCodeAt($str, $e) < 33) && ($e > 0)) {
			#src/system/Cs2Hx.hx:370: characters 4-7
			--$e;
		}
		#src/system/Cs2Hx.hx:372: lines 372-373
		if ($e < 0) {
			#src/system/Cs2Hx.hx:373: characters 4-13
			return "";
		}
		#src/system/Cs2Hx.hx:375: characters 3-34
		return \mb_substr($str, $i, $e - $i + 1);
	}

	/**
	 * @param string $str
	 * @param \Array_hx $chars
	 * 
	 * @return string
	 */
	public static function TrimEnd ($str, $chars = null) {
		#src/system/Cs2Hx.hx:380: lines 380-381
		if ($chars === null) {
			#src/system/Cs2Hx.hx:381: characters 4-22
			return \rtrim($str);
		}
		#src/system/Cs2Hx.hx:383: characters 10-15
		throw HaxeException::thrown(new NotImplementedException());
	}

	/**
	 * @param string $str
	 * @param \Array_hx $chars
	 * 
	 * @return string
	 */
	public static function TrimStart ($str, $chars = null) {
		#src/system/Cs2Hx.hx:388: lines 388-389
		if ($chars === null) {
			#src/system/Cs2Hx.hx:389: characters 4-22
			return \ltrim($str);
		}
		#src/system/Cs2Hx.hx:390: characters 3-13
		$i = 0;
		#src/system/Cs2Hx.hx:391: lines 391-402
		while ($i < mb_strlen($str)) {
			#src/system/Cs2Hx.hx:393: characters 4-30
			$c = HxString::charCodeAt($str, $i);
			#src/system/Cs2Hx.hx:394: lines 394-399
			$_g = 0;
			while ($_g < $chars->length) {
				#src/system/Cs2Hx.hx:394: characters 9-11
				$ch = ($chars->arr[$_g] ?? null);
				#src/system/Cs2Hx.hx:394: lines 394-399
				++$_g;
				#src/system/Cs2Hx.hx:395: lines 395-399
				if ($c === $ch) {
					#src/system/Cs2Hx.hx:397: characters 6-9
					++$i;
					#src/system/Cs2Hx.hx:398: characters 6-14
					continue;
				}
			}
			#src/system/Cs2Hx.hx:401: characters 4-9
			break;
		}
		#src/system/Cs2Hx.hx:404: characters 10-23
		return \mb_substr($str, $i, null);
	}

	/**
	 * @param string $str
	 * @param \Array_hx $chars
	 * 
	 * @return string
	 */
	public static function Trim_ ($str, $chars) {
		#src/system/Cs2Hx.hx:342: lines 342-343
		if (mb_strlen($str) === 0) {
			#src/system/Cs2Hx.hx:343: characters 4-14
			return $str;
		}
		#src/system/Cs2Hx.hx:345: characters 3-17
		$i = 0;
		#src/system/Cs2Hx.hx:346: lines 346-347
		while ((Cs2Hx::IndexOf($chars, HxString::charCodeAt($str, $i)) !== -1) && ($i < mb_strlen($str))) {
			#src/system/Cs2Hx.hx:347: characters 4-7
			++$i;
		}
		#src/system/Cs2Hx.hx:349: characters 3-30
		$e = mb_strlen($str) - 1;
		#src/system/Cs2Hx.hx:350: lines 350-351
		while ((Cs2Hx::IndexOf($chars, HxString::charCodeAt($str, $e)) !== -1) && ($e > 0)) {
			#src/system/Cs2Hx.hx:351: characters 4-7
			--$e;
		}
		#src/system/Cs2Hx.hx:353: lines 353-354
		if ($e < 0) {
			#src/system/Cs2Hx.hx:354: characters 4-13
			return "";
		}
		#src/system/Cs2Hx.hx:356: characters 3-34
		return \mb_substr($str, $i, $e - $i + 1);
	}

	/**
	 * @param string $s
	 * @param CsRef $out
	 * 
	 * @return bool
	 */
	public static function TryParseBool ($s, $out) {
		#src/system/Cs2Hx.hx:483: characters 11-26
		$__hx__switch = (\mb_strtolower($s));
		if ($__hx__switch === "false") {
			#src/system/Cs2Hx.hx:489: characters 5-22
			$out->Value = false;
			#src/system/Cs2Hx.hx:490: characters 5-16
			return true;
		} else if ($__hx__switch === "true") {
			#src/system/Cs2Hx.hx:486: characters 5-21
			$out->Value = true;
			#src/system/Cs2Hx.hx:487: characters 5-16
			return true;
		} else {
			#src/system/Cs2Hx.hx:492: characters 5-17
			return false;
		}
	}

	/**
	 * @param string $s
	 * @param CsRef $out
	 * 
	 * @return bool
	 */
	public static function TryParseFloat ($s, $out) {
		#src/system/Cs2Hx.hx:473: characters 3-35
		$i = \Std::parseFloat($s);
		#src/system/Cs2Hx.hx:475: lines 475-476
		if (\is_nan($i)) {
			#src/system/Cs2Hx.hx:476: characters 4-16
			return false;
		}
		#src/system/Cs2Hx.hx:478: characters 3-16
		$out->Value = $i;
		#src/system/Cs2Hx.hx:479: characters 3-14
		return true;
	}

	/**
	 * @param string $s
	 * @param CsRef $out
	 * 
	 * @return bool
	 */
	public static function TryParseInt ($s, $out) {
		#src/system/Cs2Hx.hx:460: characters 3-27
		$i = \Std::parseInt($s);
		#src/system/Cs2Hx.hx:462: lines 462-463
		if ($i === null) {
			#src/system/Cs2Hx.hx:463: characters 4-16
			return false;
		}
		#src/system/Cs2Hx.hx:464: lines 464-465
		if (($i === 0) && ($s !== "0")) {
			#src/system/Cs2Hx.hx:465: characters 4-16
			return false;
		}
		#src/system/Cs2Hx.hx:467: characters 3-16
		$out->Value = $i;
		#src/system/Cs2Hx.hx:468: characters 3-14
		return true;
	}
}

Boot::registerClass(Cs2Hx::class, 'system.Cs2Hx');
