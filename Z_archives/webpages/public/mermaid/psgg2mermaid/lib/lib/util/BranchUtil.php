<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace lib\util;

use \php\Boot;
use \system\Cs2Hx;
use \psgg\HxRegexUtil;
use \php\_Boot\HxString;

class BranchUtil {
	/**
	 * @param string $branch
	 * @param string $brcond
	 * @param string $branch_cmt
	 * 
	 * @return BranchUtil_Item
	 */
	public static function Read ($branch, $brcond, $branch_cmt) {
		#src/lib/util/BranchUtil.hx:10: characters 9-76
		$item = new BranchUtil_Item();
		#src/lib/util/BranchUtil.hx:11: lines 11-14
		if (($branch === null) || (mb_strlen($branch) === 0)) {
			#src/lib/util/BranchUtil.hx:13: characters 13-24
			return null;
		}
		#src/lib/util/BranchUtil.hx:15: characters 9-104
		$item->br_raw_list = StringUtil::SplitTrim($branch, HxString::charCodeAt("\x0A", 0));
		#src/lib/util/BranchUtil.hx:16: characters 9-47
		$item->br_api_list = new \Array_hx();
		#src/lib/util/BranchUtil.hx:17: characters 9-49
		$item->br_state_list = new \Array_hx();
		#src/lib/util/BranchUtil.hx:19: characters 13-27
		$n = 0;
		#src/lib/util/BranchUtil.hx:20: lines 20-30
		while ($n < $item->br_raw_list->length) {
			#src/lib/util/BranchUtil.hx:22: characters 17-52
			$s = ($item->br_raw_list->arr[$n] ?? null);
			#src/lib/util/BranchUtil.hx:23: characters 17-76
			$api = HxRegexUtil::Get1stMatch("^.+\\(", $s);
			#src/lib/util/BranchUtil.hx:24: characters 17-59
			$api = StringUtil::TrimEnd($api, 40);
			#src/lib/util/BranchUtil.hx:25: characters 17-43
			$_this = $item->br_api_list;
			$_this->arr[$_this->length++] = $api;
			#src/lib/util/BranchUtil.hx:26: characters 17-110
			$bst = Cs2Hx::TrimStart(HxRegexUtil::Get1stMatch("\\(.+\\)", $s), \Array_hx::wrap([40]));
			#src/lib/util/BranchUtil.hx:27: characters 17-59
			$bst = StringUtil::TrimEnd($bst, 41);
			#src/lib/util/BranchUtil.hx:28: characters 17-45
			$_this1 = $item->br_state_list;
			$_this1->arr[$_this1->length++] = $bst;
			#src/lib/util/BranchUtil.hx:29: characters 17-20
			++$n;
		}
		#src/lib/util/BranchUtil.hx:32: lines 32-35
		if (!(($brcond === null) || (mb_strlen($brcond) === 0))) {
			#src/lib/util/BranchUtil.hx:34: characters 13-109
			$item->br_cond_list = StringUtil::SplitTrim($brcond, HxString::charCodeAt("\x0A", 0));
		}
		#src/lib/util/BranchUtil.hx:36: lines 36-48
		if (!(($branch_cmt === null) || (mb_strlen($branch_cmt) === 0))) {
			#src/lib/util/BranchUtil.hx:38: characters 13-112
			$item->br_cmt_list = StringUtil::SplitTrim($branch_cmt, HxString::charCodeAt("\x0A", 0));
			#src/lib/util/BranchUtil.hx:40: characters 17-31
			$n = 0;
			#src/lib/util/BranchUtil.hx:41: lines 41-46
			while ($n < $item->br_cmt_list->length) {
				#src/lib/util/BranchUtil.hx:43: characters 21-75
				$a = Cs2Hx::Trim(($item->br_cmt_list->arr[$n] ?? null));
				#src/lib/util/BranchUtil.hx:44: characters 21-60
				$item->br_cmt_list->offsetSet($n, ($a === "?" ? "" : $a));
				#src/lib/util/BranchUtil.hx:45: characters 21-24
				++$n;
			}
		}
		#src/lib/util/BranchUtil.hx:49: characters 9-20
		return $item;
	}

	/**
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(BranchUtil::class, 'lib.util.BranchUtil');
