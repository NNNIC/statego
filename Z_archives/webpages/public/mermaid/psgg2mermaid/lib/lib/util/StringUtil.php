<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace lib\util;

use \psgg\HxString as PsggHxString;
use \php\Boot;
use \haxe\Exception;
use \system\Cs2Hx;
use \psgg\HxRegexUtil;
use \system\SystemException;
use \php\_Boot\HxString;
use \system\CsRef;

class StringUtil {
	/**
	 * @var string
	 */
	const _0a = "\x0A";
	/**
	 * @var string
	 */
	const _0d0a = "\x0D\x0A";

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public static function ConverNewLineCharForDisplay ($s) {
		#src/lib/util/StringUtil.hx:136: lines 136-143
		if ($s !== null) {
			#src/lib/util/StringUtil.hx:138: characters 13-51
			$srcnl = StringUtil::FindNewLineChar($s);
			#src/lib/util/StringUtil.hx:139: lines 139-142
			if ($srcnl === "\x0A") {
				#src/lib/util/StringUtil.hx:141: characters 17-45
				return \StringTools::replace($s, "\x0A", "\x0D\x0A");
			}
		}
		#src/lib/util/StringUtil.hx:144: characters 9-17
		return $s;
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public static function ConvertNewLineForExcel ($s) {
		#src/lib/util/StringUtil.hx:109: lines 109-115
		if ($s !== null) {
			#src/lib/util/StringUtil.hx:111: lines 111-114
			if (StringUtil::FindNewLineChar($s) === "\x0D\x0A") {
				#src/lib/util/StringUtil.hx:113: characters 17-45
				return \StringTools::replace($s, "\x0D\x0A", "\x0A");
			}
		}
		#src/lib/util/StringUtil.hx:116: characters 9-17
		return $s;
	}

	/**
	 * @param string $s
	 * @param int $c
	 * 
	 * @return int
	 */
	public static function CountChar ($s, $c) {
		#src/lib/util/StringUtil.hx:500: lines 500-503
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/StringUtil.hx:502: characters 13-21
			return 0;
		}
		#src/lib/util/StringUtil.hx:504: characters 9-27
		$count = 0;
		#src/lib/util/StringUtil.hx:505: lines 505-511
		$_g = 0;
		$_g1 = Cs2Hx::ToCharArray($s);
		while ($_g < $_g1->length) {
			#src/lib/util/StringUtil.hx:505: characters 14-15
			$i = ($_g1->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:505: lines 505-511
			++$_g;
			#src/lib/util/StringUtil.hx:507: lines 507-510
			if ($i === $c) {
				#src/lib/util/StringUtil.hx:509: characters 17-24
				++$count;
			}
		}
		#src/lib/util/StringUtil.hx:512: characters 9-21
		return $count;
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public static function CutEmptyLines ($s) {
		#src/lib/util/StringUtil.hx:59: lines 59-62
		if ($s === null) {
			#src/lib/util/StringUtil.hx:61: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:63: characters 9-53
		$newlinechar = StringUtil::FindNewLineChar($s);
		#src/lib/util/StringUtil.hx:64: lines 64-67
		if ($newlinechar === null) {
			#src/lib/util/StringUtil.hx:66: characters 13-21
			return $s;
		}
		#src/lib/util/StringUtil.hx:68: characters 9-56
		$tokens = StringUtil::SplitTrimEnd($s, 10);
		#src/lib/util/StringUtil.hx:69: characters 9-54
		$list = new \Array_hx();
		#src/lib/util/StringUtil.hx:70: lines 70-77
		$_g = 0;
		while ($_g < $tokens->length) {
			#src/lib/util/StringUtil.hx:70: characters 14-15
			$t = ($tokens->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:70: lines 70-77
			++$_g;
			#src/lib/util/StringUtil.hx:72: lines 72-75
			if (Cs2Hx::IsNullOrWhiteSpace($t)) {
				#src/lib/util/StringUtil.hx:74: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:76: characters 13-25
			$list->arr[$list->length++] = $t;
		}
		#src/lib/util/StringUtil.hx:78: characters 9-27
		$o = "";
		#src/lib/util/StringUtil.hx:79: lines 79-87
		Cs2Hx::ForEach($list, function ($i) use (&$o, &$newlinechar) {
			#src/lib/util/StringUtil.hx:81: lines 81-84
			if (!(($o === null) || (mb_strlen($o) === 0))) {
				#src/lib/util/StringUtil.hx:83: characters 17-33
				$o = ($o??'null') . ($newlinechar??'null');
			}
			#src/lib/util/StringUtil.hx:85: characters 13-19
			$o = ($o??'null') . ($i??'null');
		});
		#src/lib/util/StringUtil.hx:88: characters 9-17
		return $o;
	}

	/**
	 * @param \Array_hx $src
	 * 
	 * @return \Array_hx
	 */
	public static function CutEmptyLines_ListString ($src) {
		#src/lib/util/StringUtil.hx:92: lines 92-95
		if ($src === null) {
			#src/lib/util/StringUtil.hx:94: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:96: characters 9-54
		$list = new \Array_hx();
		#src/lib/util/StringUtil.hx:97: lines 97-104
		$_g = 0;
		while ($_g < $src->length) {
			#src/lib/util/StringUtil.hx:97: characters 14-15
			$l = ($src->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:97: lines 97-104
			++$_g;
			#src/lib/util/StringUtil.hx:99: lines 99-102
			if (Cs2Hx::IsNullOrWhiteSpace($l)) {
				#src/lib/util/StringUtil.hx:101: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:103: characters 13-25
			$list->arr[$list->length++] = $l;
		}
		#src/lib/util/StringUtil.hx:105: characters 9-20
		return $list;
	}

	/**
	 * @param \Array_hx $lines
	 * @param string $firstmatch
	 * @param string $endmatch
	 * @param CsRef $firstline
	 * 
	 * @return \Array_hx
	 */
	public static function FindMatchedLines ($lines, $firstmatch, $endmatch, $firstline) {
		#src/lib/util/StringUtil.hx:148: characters 9-29
		$firstline->Value = -1;
		#src/lib/util/StringUtil.hx:149: lines 149-152
		if ($lines === null) {
			#src/lib/util/StringUtil.hx:151: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:153: characters 9-56
		$result = new \Array_hx();
		#src/lib/util/StringUtil.hx:154: characters 9-42
		$bFirstMatchDone = false;
		#src/lib/util/StringUtil.hx:155: characters 9-28
		$index = -1;
		#src/lib/util/StringUtil.hx:156: lines 156-182
		while (true) {
			#src/lib/util/StringUtil.hx:158: characters 13-20
			++$index;
			#src/lib/util/StringUtil.hx:159: lines 159-162
			if ($index >= $lines->length) {
				#src/lib/util/StringUtil.hx:161: characters 17-22
				break;
			}
			#src/lib/util/StringUtil.hx:163: characters 13-44
			$line = ($lines->arr[$index] ?? null);
			#src/lib/util/StringUtil.hx:164: lines 164-181
			if (!$bFirstMatchDone) {
				#src/lib/util/StringUtil.hx:166: lines 166-171
				if (HxString::indexOf($line, $firstmatch) !== -1) {
					#src/lib/util/StringUtil.hx:168: characters 21-43
					$bFirstMatchDone = true;
					#src/lib/util/StringUtil.hx:169: characters 21-44
					$firstline->Value = $index;
					#src/lib/util/StringUtil.hx:170: characters 21-38
					$result->arr[$result->length++] = $line;
				}
				#src/lib/util/StringUtil.hx:172: characters 17-25
				continue;
			} else {
				#src/lib/util/StringUtil.hx:176: characters 17-34
				$result->arr[$result->length++] = $line;
				#src/lib/util/StringUtil.hx:177: lines 177-180
				if (HxString::indexOf($line, $endmatch) !== -1) {
					#src/lib/util/StringUtil.hx:179: characters 21-34
					return $result;
				}
			}
		}
		#src/lib/util/StringUtil.hx:183: lines 183-186
		if ($bFirstMatchDone) {
			#src/lib/util/StringUtil.hx:185: characters 20-25
			throw Exception::thrown(new SystemException("Can not find end-match"));
		}
		#src/lib/util/StringUtil.hx:187: characters 9-20
		return null;
	}

	/**
	 * @param \Array_hx $lines
	 * @param string $firstmatch
	 * @param string $endmatch
	 * @param CsRef $firstline
	 * 
	 * @return \Array_hx
	 */
	public static function FindMatchedLines2 ($lines, $firstmatch, $endmatch, $firstline) {
		#src/lib/util/StringUtil.hx:191: characters 9-29
		$firstline->Value = -1;
		#src/lib/util/StringUtil.hx:192: lines 192-195
		if ($lines === null) {
			#src/lib/util/StringUtil.hx:194: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:196: characters 9-56
		$result = new \Array_hx();
		#src/lib/util/StringUtil.hx:197: characters 9-42
		$bFirstMatchDone = false;
		#src/lib/util/StringUtil.hx:198: characters 9-33
		$pushCounter = 0;
		#src/lib/util/StringUtil.hx:199: characters 9-28
		$index = -1;
		#src/lib/util/StringUtil.hx:200: lines 200-239
		while (true) {
			#src/lib/util/StringUtil.hx:202: characters 13-20
			++$index;
			#src/lib/util/StringUtil.hx:203: lines 203-206
			if ($index >= $lines->length) {
				#src/lib/util/StringUtil.hx:205: characters 17-22
				break;
			}
			#src/lib/util/StringUtil.hx:207: characters 13-44
			$line = ($lines->arr[$index] ?? null);
			#src/lib/util/StringUtil.hx:208: lines 208-238
			if (!$bFirstMatchDone) {
				#src/lib/util/StringUtil.hx:210: lines 210-215
				if (HxString::indexOf($line, $firstmatch) !== -1) {
					#src/lib/util/StringUtil.hx:212: characters 21-43
					$bFirstMatchDone = true;
					#src/lib/util/StringUtil.hx:213: characters 21-44
					$firstline->Value = $index;
					#src/lib/util/StringUtil.hx:214: characters 21-38
					$result->arr[$result->length++] = $line;
				}
				#src/lib/util/StringUtil.hx:216: characters 17-25
				continue;
			} else {
				#src/lib/util/StringUtil.hx:220: characters 17-34
				$result->arr[$result->length++] = $line;
				#src/lib/util/StringUtil.hx:221: lines 221-237
				if (HxString::indexOf($line, $firstmatch) !== -1) {
					#src/lib/util/StringUtil.hx:223: characters 21-34
					++$pushCounter;
					#src/lib/util/StringUtil.hx:224: characters 21-29
					continue;
				} else if (HxString::indexOf($line, $endmatch) !== -1) {
					#src/lib/util/StringUtil.hx:228: lines 228-236
					if ($pushCounter > 0) {
						#src/lib/util/StringUtil.hx:230: characters 25-38
						--$pushCounter;
						#src/lib/util/StringUtil.hx:231: characters 25-33
						continue;
					} else if ($pushCounter === 0) {
						#src/lib/util/StringUtil.hx:235: characters 25-38
						return $result;
					}
				}
			}
		}
		#src/lib/util/StringUtil.hx:240: lines 240-243
		if ($bFirstMatchDone) {
			#src/lib/util/StringUtil.hx:242: characters 20-25
			throw Exception::thrown(new SystemException("Can not find end-match"));
		}
		#src/lib/util/StringUtil.hx:244: characters 9-20
		return null;
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public static function FindNewLineChar ($s) {
		#src/lib/util/StringUtil.hx:120: lines 120-123
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/StringUtil.hx:122: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:124: lines 124-127
		if (HxString::indexOf($s, "\x0D\x0A") !== -1) {
			#src/lib/util/StringUtil.hx:126: characters 13-25
			return "\x0D\x0A";
		}
		#src/lib/util/StringUtil.hx:128: lines 128-131
		if (HxString::indexOf($s, "\x0A") !== -1) {
			#src/lib/util/StringUtil.hx:130: characters 13-23
			return "\x0A";
		}
		#src/lib/util/StringUtil.hx:132: characters 9-20
		return null;
	}

	/**
	 * @param \Array_hx $lines
	 * @param string $newlinechar
	 * 
	 * @return string
	 */
	public static function LineToBuf ($lines, $newlinechar = null) {
		#src/lib/util/StringUtil.hx:342: lines 342-345
		if ($newlinechar === null) {
			#src/lib/util/StringUtil.hx:344: characters 13-31
			$newlinechar = "\x0A";
		}
		#src/lib/util/StringUtil.hx:346: characters 9-27
		$s = "";
		#src/lib/util/StringUtil.hx:347: lines 347-354
		$_g = 0;
		while ($_g < $lines->length) {
			#src/lib/util/StringUtil.hx:347: characters 14-15
			$l = ($lines->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:347: lines 347-354
			++$_g;
			#src/lib/util/StringUtil.hx:349: lines 349-352
			if (!(($s === null) || (mb_strlen($s) === 0))) {
				#src/lib/util/StringUtil.hx:351: characters 17-33
				$s = ($s??'null') . ($newlinechar??'null');
			}
			#src/lib/util/StringUtil.hx:353: characters 13-41
			$s = ($s??'null') . (Cs2Hx::TrimEnd($l)??'null');
		}
		#src/lib/util/StringUtil.hx:355: characters 9-17
		return $s;
	}

	/**
	 * @param \Array_hx $src
	 * @param int $src_target_start
	 * @param int $src_target_size
	 * @param \Array_hx $rep
	 * 
	 * @return \Array_hx
	 */
	public static function ReplaceLines ($src, $src_target_start, $src_target_size, $rep) {
		#src/lib/util/StringUtil.hx:248: lines 248-251
		if ($src === null) {
			#src/lib/util/StringUtil.hx:250: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:252: characters 9-56
		$result = new \Array_hx();
		#src/lib/util/StringUtil.hx:254: characters 13-27
		$i = 0;
		#src/lib/util/StringUtil.hx:255: lines 255-259
		while ($i < $src_target_start) {
			#src/lib/util/StringUtil.hx:257: characters 29-35
			$src1 = ($src->arr[$i] ?? null);
			#src/lib/util/StringUtil.hx:257: characters 17-36
			$result->arr[$result->length++] = $src1;
			#src/lib/util/StringUtil.hx:258: characters 17-20
			++$i;
		}
		#src/lib/util/StringUtil.hx:261: characters 9-43
		Cs2Hx::AddRange($result, $rep);
		#src/lib/util/StringUtil.hx:263: characters 13-60
		$i = $src_target_start + $src_target_size;
		#src/lib/util/StringUtil.hx:264: lines 264-268
		while ($i < $src->length) {
			#src/lib/util/StringUtil.hx:266: characters 29-35
			$src1 = ($src->arr[$i] ?? null);
			#src/lib/util/StringUtil.hx:266: characters 17-36
			$result->arr[$result->length++] = $src1;
			#src/lib/util/StringUtil.hx:267: characters 17-20
			++$i;
		}
		#src/lib/util/StringUtil.hx:270: characters 9-22
		return $result;
	}

	/**
	 * @param string $line
	 * @param string $target
	 * @param string $replace
	 * @param bool $bTrimEnd
	 * 
	 * @return \Array_hx
	 */
	public static function ReplaceWordsInLine ($line, $target, $replace, $bTrimEnd = true) {
		#src/lib/util/StringUtil.hx:273: lines 273-339
		if ($bTrimEnd === null) {
			$bTrimEnd = true;
		}
		#src/lib/util/StringUtil.hx:274: lines 274-277
		if (($line === null) || (mb_strlen($line) === 0)) {
			#src/lib/util/StringUtil.hx:276: characters 20-25
			throw Exception::thrown(new SystemException("Unexpected! {8F041B67-5F7C-4159-83BC-A0A20858C242}"));
		}
		#src/lib/util/StringUtil.hx:278: lines 278-281
		if (($target === null) || (mb_strlen($target) === 0)) {
			#src/lib/util/StringUtil.hx:280: characters 20-25
			throw Exception::thrown(new SystemException("Unexpected! {475F3A7E-03A0-4AE0-94AD-8668BDA5B217}"));
		}
		#src/lib/util/StringUtil.hx:282: lines 282-285
		if (Cs2Hx::Trim($target) !== $target) {
			#src/lib/util/StringUtil.hx:284: characters 20-25
			throw Exception::thrown(new SystemException("Unexpected! {BC4E8F0B-5DAA-4ED5-9E75-98134929CF0B}"));
		}
		#src/lib/util/StringUtil.hx:286: lines 286-289
		if (HxString::indexOf($line, $target) === -1) {
			#src/lib/util/StringUtil.hx:288: characters 20-25
			throw Exception::thrown(new SystemException("Unexpected! {D5C8183F-D166-4C6E-AB6B-2E7FD7155696}"));
		}
		#src/lib/util/StringUtil.hx:290: characters 9-34
		$replace2 = "";
		#src/lib/util/StringUtil.hx:291: lines 291-294
		if (!(($replace === null) || (mb_strlen($replace) === 0))) {
			#src/lib/util/StringUtil.hx:293: characters 13-50
			$replace2 = Cs2Hx::Trim($replace);
		}
		#src/lib/util/StringUtil.hx:295: characters 9-76
		$newline = StringUtil::FindNewLineChar($replace2);
		#src/lib/util/StringUtil.hx:296: lines 296-302
		if ($newline === null) {
			#src/lib/util/StringUtil.hx:298: characters 13-61
			$tmp = \StringTools::replace($line, $target, $replace2);
			#src/lib/util/StringUtil.hx:299: characters 13-55
			$p = new \Array_hx();
			#src/lib/util/StringUtil.hx:300: characters 13-24
			$p->arr[$p->length++] = $tmp;
			#src/lib/util/StringUtil.hx:301: characters 13-21
			return $p;
		}
		#src/lib/util/StringUtil.hx:303: characters 9-142
		$replines = ($bTrimEnd ? StringUtil::SplitTrimEnd($replace2, 10) : StringUtil::SplitTrim($replace2, 10));
		#src/lib/util/StringUtil.hx:304: characters 9-76
		$firstspace = HxRegexUtil::Get1stMatch("^\\s", $line);
		#src/lib/util/StringUtil.hx:305: characters 9-52
		$targetindex = HxString::indexOf($line, $target);
		#src/lib/util/StringUtil.hx:306: characters 9-56
		$result = new \Array_hx();
		#src/lib/util/StringUtil.hx:308: characters 13-58
		$buf = \mb_substr($line, 0, $targetindex);
		#src/lib/util/StringUtil.hx:309: characters 13-29
		$result->arr[$result->length++] = $buf;
		#src/lib/util/StringUtil.hx:311: lines 311-324
		$_g = 0;
		while ($_g < $replines->length) {
			#src/lib/util/StringUtil.hx:311: characters 14-15
			$r = ($replines->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:311: lines 311-324
			++$_g;
			#src/lib/util/StringUtil.hx:313: characters 13-33
			$buf = "";
			#src/lib/util/StringUtil.hx:314: lines 314-321
			if ($firstspace !== null) {
				#src/lib/util/StringUtil.hx:316: characters 61-137
				$str = Cs2Hx::NewString(32, $targetindex - mb_strlen($firstspace));
				#src/lib/util/StringUtil.hx:316: characters 17-137
				$buf = ($buf??'null') . ((($firstspace === null ? "" : $firstspace))??'null') . ((($str === null ? "" : $str))??'null');
			} else {
				#src/lib/util/StringUtil.hx:320: characters 17-56
				$buf = ($buf??'null') . (Cs2Hx::NewString(32, $targetindex)??'null');
			}
			#src/lib/util/StringUtil.hx:322: characters 13-21
			$buf = ($buf??'null') . ($r??'null');
			#src/lib/util/StringUtil.hx:323: characters 13-29
			$result->arr[$result->length++] = $buf;
		}
		#src/lib/util/StringUtil.hx:326: characters 13-33
		$buf = "";
		#src/lib/util/StringUtil.hx:327: lines 327-334
		if ($firstspace !== null) {
			#src/lib/util/StringUtil.hx:329: characters 61-153
			$str = Cs2Hx::NewString(32, $targetindex + mb_strlen($target) - mb_strlen($firstspace));
			#src/lib/util/StringUtil.hx:329: characters 17-153
			$buf = ($buf??'null') . ((($firstspace === null ? "" : $firstspace))??'null') . ((($str === null ? "" : $str))??'null');
		} else {
			#src/lib/util/StringUtil.hx:333: characters 17-72
			$buf = ($buf??'null') . (Cs2Hx::NewString(32, $targetindex + mb_strlen($target))??'null');
		}
		#src/lib/util/StringUtil.hx:335: characters 13-60
		$buf = ($buf??'null') . (\mb_substr($line, $targetindex + mb_strlen($target), null)??'null');
		#src/lib/util/StringUtil.hx:336: characters 13-29
		$result->arr[$result->length++] = $buf;
		#src/lib/util/StringUtil.hx:338: characters 9-22
		return $result;
	}

	/**
	 * @param string $buf
	 * @param CsRef $api
	 * @param CsRef $args
	 * @param CsRef $error
	 * 
	 * @return bool
	 */
	public static function SplitApiArges ($buf, $api, $args, $error) {
		#src/lib/util/StringUtil.hx:406: characters 9-25
		$api->Value = null;
		#src/lib/util/StringUtil.hx:407: characters 9-26
		$args->Value = null;
		#src/lib/util/StringUtil.hx:408: characters 9-27
		$error->Value = null;
		#src/lib/util/StringUtil.hx:409: lines 409-413
		if (($buf === null) || (mb_strlen($buf) === 0)) {
			#src/lib/util/StringUtil.hx:411: characters 13-40
			$error->Value = "buf is null";
			#src/lib/util/StringUtil.hx:412: characters 13-25
			return false;
		}
		#src/lib/util/StringUtil.hx:414: characters 9-56
		$sp = HxString::indexOf($buf, \mb_chr(40), 0);
		#src/lib/util/StringUtil.hx:415: lines 415-419
		if ($sp < 0) {
			#src/lib/util/StringUtil.hx:417: characters 13-28
			$api->Value = $buf;
			#src/lib/util/StringUtil.hx:418: characters 13-24
			return true;
		}
		#src/lib/util/StringUtil.hx:420: characters 9-56
		$ep = HxString::indexOf($buf, \mb_chr(41), 0);
		#src/lib/util/StringUtil.hx:421: lines 421-425
		if ($ep < $sp) {
			#src/lib/util/StringUtil.hx:423: characters 13-54
			$error->Value = "arg string is invalid. #1";
			#src/lib/util/StringUtil.hx:424: characters 13-25
			return false;
		}
		#src/lib/util/StringUtil.hx:426: characters 9-38
		$api->Value = \mb_substr($buf, 0, $sp);
		#src/lib/util/StringUtil.hx:427: characters 9-55
		$argstr = \mb_substr($buf, $sp, $ep - $sp);
		#src/lib/util/StringUtil.hx:428: lines 428-439
		if (!(($argstr === null) || (mb_strlen($argstr) === 0))) {
			#src/lib/util/StringUtil.hx:430: characters 13-60
			$argstr = Cs2Hx::TrimStart($argstr, \Array_hx::wrap([40]));
			#src/lib/util/StringUtil.hx:431: lines 431-434
			if (!(($argstr === null) || (mb_strlen($argstr) === 0))) {
				#src/lib/util/StringUtil.hx:433: characters 17-65
				$argstr = StringUtil::TrimEnd($argstr, 41);
			}
			#src/lib/util/StringUtil.hx:435: lines 435-438
			if (!(($argstr === null) || (mb_strlen($argstr) === 0))) {
				#src/lib/util/StringUtil.hx:437: characters 17-51
				$argstr = Cs2Hx::Trim($argstr);
			}
		}
		#src/lib/util/StringUtil.hx:440: lines 440-443
		if (($argstr === null) || (mb_strlen($argstr) === 0)) {
			#src/lib/util/StringUtil.hx:442: characters 13-24
			return true;
		}
		#src/lib/util/StringUtil.hx:444: characters 9-76
		$arglist = StringUtil::SplitComma($argstr);
		#src/lib/util/StringUtil.hx:445: lines 445-449
		if ($arglist === null) {
			#src/lib/util/StringUtil.hx:447: characters 13-79
			$error->Value = "unexpected! {87753187-4E54-4E2D-A445-239002F2E59A}";
			#src/lib/util/StringUtil.hx:448: characters 13-25
			return false;
		}
		#src/lib/util/StringUtil.hx:450: characters 9-29
		$args->Value = $arglist;
		#src/lib/util/StringUtil.hx:451: characters 9-20
		return true;
	}

	/**
	 * @param string $i
	 * 
	 * @return \Array_hx
	 */
	public static function SplitComma ($i) {
		#src/lib/util/StringUtil.hx:359: lines 359-362
		if (($i === null) || (mb_strlen($i) === 0)) {
			#src/lib/util/StringUtil.hx:361: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:363: characters 9-45
		$s = Cs2Hx::Trim($i);
		#src/lib/util/StringUtil.hx:364: lines 364-367
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/StringUtil.hx:366: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:368: characters 9-65
		$dw = "\\x22((\\x5c\\x22)|([^\\x22]))*?\\x22";
		#src/lib/util/StringUtil.hx:369: characters 9-43
		$p1 = "[^\\x22]+?\\x2c";
		#src/lib/util/StringUtil.hx:370: characters 9-39
		$p2 = "[^\\x22]+?\$";
		#src/lib/util/StringUtil.hx:371: characters 9-66
		$p3 = ((($dw === null ? "" : $dw))??'null') . "\\s*\\x2c";
		#src/lib/util/StringUtil.hx:372: characters 9-62
		$p4 = ((($dw === null ? "" : $dw))??'null') . "\\s*\$";
		#src/lib/util/StringUtil.hx:373: characters 9-99
		$regex = PsggHxString::Format("^(({0})|({1})|({2})|({3}))", \Array_hx::wrap([
			$p1,
			$p2,
			$p3,
			$p4,
		]));
		#src/lib/util/StringUtil.hx:374: characters 9-27
		$tb = $s;
		#src/lib/util/StringUtil.hx:375: characters 9-54
		$list = new \Array_hx();
		#src/lib/util/StringUtil.hx:377: characters 13-30
		$loop = 0;
		#src/lib/util/StringUtil.hx:378: lines 378-396
		while ($loop <= 100) {
			#src/lib/util/StringUtil.hx:380: lines 380-383
			if ($loop === 100) {
				#src/lib/util/StringUtil.hx:382: characters 28-33
				throw Exception::thrown(new SystemException("Unexpected! {11529044-AA98-47BC-9B8B-A7D2B5322265}"));
			}
			#src/lib/util/StringUtil.hx:384: characters 17-72
			$f = HxRegexUtil::Get1stMatch($regex, $tb);
			#src/lib/util/StringUtil.hx:385: lines 385-394
			if (!(($f === null) || (mb_strlen($f) === 0))) {
				#src/lib/util/StringUtil.hx:387: characters 21-86
				$f2 = Cs2Hx::Trim(Cs2Hx::Trim_($f, \Array_hx::wrap([44])));
				#src/lib/util/StringUtil.hx:388: characters 21-34
				$list->arr[$list->length++] = $f2;
				#src/lib/util/StringUtil.hx:389: characters 26-45
				$tb = \mb_substr($tb, mb_strlen($f), null);
			} else {
				#src/lib/util/StringUtil.hx:393: characters 21-26
				break;
			}
			#src/lib/util/StringUtil.hx:395: characters 17-23
			++$loop;
		}
		#src/lib/util/StringUtil.hx:398: lines 398-401
		if ($list->length > 0) {
			#src/lib/util/StringUtil.hx:400: characters 13-24
			return $list;
		}
		#src/lib/util/StringUtil.hx:402: characters 9-20
		return null;
	}

	/**
	 * @param string $s
	 * @param int $separator
	 * 
	 * @return \Array_hx
	 */
	public static function SplitTrim ($s, $separator) {
		#src/lib/util/StringUtil.hx:12: lines 12-15
		if ($s === null) {
			#src/lib/util/StringUtil.hx:14: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:16: characters 9-73
		$tokens = Cs2Hx::Split($s, \Array_hx::wrap([$separator]));
		#src/lib/util/StringUtil.hx:17: characters 9-54
		$list = new \Array_hx();
		#src/lib/util/StringUtil.hx:18: lines 18-22
		$_g = 0;
		while ($_g < $tokens->length) {
			#src/lib/util/StringUtil.hx:18: characters 14-15
			$t = ($tokens->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:18: lines 18-22
			++$_g;
			#src/lib/util/StringUtil.hx:20: characters 13-50
			$t2 = Cs2Hx::Trim($t);
			#src/lib/util/StringUtil.hx:21: characters 13-26
			$list->arr[$list->length++] = $t2;
		}
		#src/lib/util/StringUtil.hx:23: characters 9-20
		return $list;
	}

	/**
	 * @param string $s
	 * @param int $separator
	 * 
	 * @return \Array_hx
	 */
	public static function SplitTrimEnd ($s, $separator) {
		#src/lib/util/StringUtil.hx:27: lines 27-30
		if ($s === null) {
			#src/lib/util/StringUtil.hx:29: characters 13-24
			return null;
		}
		#src/lib/util/StringUtil.hx:31: characters 9-73
		$tokens = Cs2Hx::Split($s, \Array_hx::wrap([$separator]));
		#src/lib/util/StringUtil.hx:32: characters 9-54
		$list = new \Array_hx();
		#src/lib/util/StringUtil.hx:33: lines 33-37
		$_g = 0;
		while ($_g < $tokens->length) {
			#src/lib/util/StringUtil.hx:33: characters 14-15
			$t = ($tokens->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:33: lines 33-37
			++$_g;
			#src/lib/util/StringUtil.hx:35: characters 13-53
			$t2 = Cs2Hx::TrimEnd($t);
			#src/lib/util/StringUtil.hx:36: characters 13-26
			$list->arr[$list->length++] = $t2;
		}
		#src/lib/util/StringUtil.hx:38: characters 9-20
		return $list;
	}

	/**
	 * @param string $s
	 * @param int $separator
	 * 
	 * @return \Array_hx
	 */
	public static function SplitTrimKeepSpace ($s, $separator) {
		#src/lib/util/StringUtil.hx:42: lines 42-47
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/StringUtil.hx:44: characters 13-55
			$p = new \Array_hx();
			#src/lib/util/StringUtil.hx:45: characters 13-23
			$p->arr[$p->length++] = "";
			#src/lib/util/StringUtil.hx:46: characters 13-21
			return $p;
		}
		#src/lib/util/StringUtil.hx:48: characters 9-72
		$lines = Cs2Hx::Split($s, \Array_hx::wrap([$separator]));
		#src/lib/util/StringUtil.hx:49: characters 9-58
		$outlines = new \Array_hx();
		#src/lib/util/StringUtil.hx:50: lines 50-54
		$_g = 0;
		while ($_g < $lines->length) {
			#src/lib/util/StringUtil.hx:50: characters 14-15
			$l = ($lines->arr[$_g] ?? null);
			#src/lib/util/StringUtil.hx:50: lines 50-54
			++$_g;
			#src/lib/util/StringUtil.hx:52: characters 13-63
			$nl = Cs2Hx::Trim_($l, \Array_hx::wrap([
				13,
				10,
			]));
			#src/lib/util/StringUtil.hx:53: characters 13-30
			$outlines->arr[$outlines->length++] = $nl;
		}
		#src/lib/util/StringUtil.hx:55: characters 9-24
		return $outlines;
	}

	/**
	 * @param string $s
	 * 
	 * @return \Array_hx
	 */
	public static function SplittComma_And_ApiArges ($s) {
		#src/lib/util/StringUtil.hx:478: characters 9-57
		$api = new CsRef(null);
		#src/lib/util/StringUtil.hx:479: characters 9-72
		$args = new CsRef(null);
		#src/lib/util/StringUtil.hx:480: characters 9-59
		$error = new CsRef(null);
		#src/lib/util/StringUtil.hx:481: characters 9-63
		StringUtil::SplitApiArges($s, $api, $args, $error);
		#src/lib/util/StringUtil.hx:482: characters 14-53
		$str = $error->Value;
		#src/lib/util/StringUtil.hx:482: lines 482-495
		if (!(($str === null) || (mb_strlen($str) === 0)) || (HxString::indexOf($api->Value, ",") !== -1)) {
			#src/lib/util/StringUtil.hx:484: characters 13-29
			$api->Value = null;
			#src/lib/util/StringUtil.hx:485: characters 13-59
			$args->Value = StringUtil::SplitComma($s);
		} else {
			#src/lib/util/StringUtil.hx:489: lines 489-492
			if ($args->Value === null) {
				#src/lib/util/StringUtil.hx:491: characters 17-49
				$args->Value = new \Array_hx();
			}
			#src/lib/util/StringUtil.hx:493: characters 13-44
			$args->Value->insert(0, $api->Value);
			#src/lib/util/StringUtil.hx:494: characters 13-29
			$api->Value = null;
		}
		#src/lib/util/StringUtil.hx:496: characters 9-26
		return $args->Value;
	}

	/**
	 * @param string $s
	 * @param int $c
	 * 
	 * @return string
	 */
	public static function TrimEnd ($s, $c) {
		#src/lib/util/StringUtil.hx:455: lines 455-458
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/StringUtil.hx:457: characters 13-21
			return $s;
		}
		#src/lib/util/StringUtil.hx:459: characters 9-32
		$len = mb_strlen($s);
		#src/lib/util/StringUtil.hx:461: characters 13-27
		$i = 0;
		#src/lib/util/StringUtil.hx:462: lines 462-472
		while ($i < $len) {
			#src/lib/util/StringUtil.hx:464: lines 464-470
			if (!(($s === null) || (mb_strlen($s) === 0))) {
				#src/lib/util/StringUtil.hx:466: lines 466-469
				if (HxString::charCodeAt($s, mb_strlen($s) - 1) === $c) {
					#src/lib/util/StringUtil.hx:468: characters 29-54
					$s = \mb_substr($s, 0, mb_strlen($s) - 1);
				}
			}
			#src/lib/util/StringUtil.hx:471: characters 17-20
			++$i;
		}
		#src/lib/util/StringUtil.hx:474: characters 9-17
		return $s;
	}

	/**
	 * @param string $s
	 * @param bool $upperOrLower
	 * 
	 * @return string
	 */
	public static function convert_to_camel_word ($s, $upperOrLower) {
		#src/lib/util/StringUtil.hx:591: lines 591-594
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/StringUtil.hx:593: characters 13-21
			return $s;
		}
		#src/lib/util/StringUtil.hx:595: characters 9-27
		$o = "";
		#src/lib/util/StringUtil.hx:596: characters 9-26
		$save = 0;
		#src/lib/util/StringUtil.hx:597: lines 597-613
		$ckuplow = function ($_) {
			#src/lib/util/StringUtil.hx:599: lines 599-602
			if (($_ >= 97) && ($_ <= 122)) {
				#src/lib/util/StringUtil.hx:601: characters 17-25
				return 1;
			}
			#src/lib/util/StringUtil.hx:603: lines 603-606
			if (($_ >= 65) && ($_ <= 90)) {
				#src/lib/util/StringUtil.hx:605: characters 17-25
				return 2;
			}
			#src/lib/util/StringUtil.hx:607: lines 607-610
			if ($_ === 95) {
				#src/lib/util/StringUtil.hx:609: characters 17-25
				return 3;
			}
			#src/lib/util/StringUtil.hx:611: characters 13-21
			return 0;
		};
		#src/lib/util/StringUtil.hx:614: characters 9-24
		$n = -1;
		#src/lib/util/StringUtil.hx:615: lines 615-645
		while (true) {
			#src/lib/util/StringUtil.hx:617: characters 13-16
			++$n;
			#src/lib/util/StringUtil.hx:618: lines 618-621
			if ($n >= mb_strlen($s)) {
				#src/lib/util/StringUtil.hx:620: characters 17-22
				break;
			}
			#src/lib/util/StringUtil.hx:622: characters 13-41
			$c = HxString::charCodeAt($s, $n);
			#src/lib/util/StringUtil.hx:623: characters 13-51
			$cs = Cs2Hx::NewString($c, 1);
			#src/lib/util/StringUtil.hx:624: characters 13-37
			$ul = $ckuplow($c);
			#src/lib/util/StringUtil.hx:625: lines 625-630
			if ($n === 0) {
				#src/lib/util/StringUtil.hx:627: characters 17-26
				$save = $ul;
				#src/lib/util/StringUtil.hx:628: characters 17-72
				$o = ($o??'null') . (($upperOrLower ? \mb_strtoupper($cs) : \mb_strtolower($cs))??'null');
				#src/lib/util/StringUtil.hx:629: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:631: lines 631-635
			if ($ul === 3) {
				#src/lib/util/StringUtil.hx:633: characters 17-26
				$save = $ul;
				#src/lib/util/StringUtil.hx:634: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:636: lines 636-641
			if ($save === 3) {
				#src/lib/util/StringUtil.hx:638: characters 17-26
				$save = $ul;
				#src/lib/util/StringUtil.hx:639: characters 17-38
				$o = ($o??'null') . (\mb_strtoupper($cs)??'null');
				#src/lib/util/StringUtil.hx:640: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:642: characters 13-22
			$save = $ul;
			#src/lib/util/StringUtil.hx:643: characters 13-20
			$o = ($o??'null') . ($cs??'null');
		}
		#src/lib/util/StringUtil.hx:646: characters 9-17
		return $o;
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public static function convert_to_snake_word_and_lower ($s) {
		#src/lib/util/StringUtil.hx:516: lines 516-519
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/StringUtil.hx:518: characters 13-21
			return $s;
		}
		#src/lib/util/StringUtil.hx:520: characters 9-27
		$o = "";
		#src/lib/util/StringUtil.hx:521: characters 9-26
		$save = 0;
		#src/lib/util/StringUtil.hx:522: lines 522-538
		$ckuplow = function ($_) {
			#src/lib/util/StringUtil.hx:524: lines 524-527
			if (($_ >= 97) && ($_ <= 122)) {
				#src/lib/util/StringUtil.hx:526: characters 17-25
				return 1;
			}
			#src/lib/util/StringUtil.hx:528: lines 528-531
			if (($_ >= 65) && ($_ <= 90)) {
				#src/lib/util/StringUtil.hx:530: characters 17-25
				return 2;
			}
			#src/lib/util/StringUtil.hx:532: lines 532-535
			if ($_ === 95) {
				#src/lib/util/StringUtil.hx:534: characters 17-25
				return 3;
			}
			#src/lib/util/StringUtil.hx:536: characters 13-21
			return 0;
		};
		#src/lib/util/StringUtil.hx:539: characters 9-24
		$n = -1;
		#src/lib/util/StringUtil.hx:540: lines 540-585
		while (true) {
			#src/lib/util/StringUtil.hx:542: characters 13-16
			++$n;
			#src/lib/util/StringUtil.hx:543: lines 543-546
			if ($n >= mb_strlen($s)) {
				#src/lib/util/StringUtil.hx:545: characters 17-22
				break;
			}
			#src/lib/util/StringUtil.hx:547: characters 13-41
			$c = HxString::charCodeAt($s, $n);
			#src/lib/util/StringUtil.hx:548: characters 13-37
			$ul = $ckuplow($c);
			#src/lib/util/StringUtil.hx:549: lines 549-554
			if ($n === 0) {
				#src/lib/util/StringUtil.hx:551: characters 17-26
				$save = $ul;
				#src/lib/util/StringUtil.hx:552: characters 17-23
				$o = ($o??'null') . ($c??'null');
				#src/lib/util/StringUtil.hx:553: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:555: lines 555-560
			if ($ul === 3) {
				#src/lib/util/StringUtil.hx:557: characters 17-25
				$save = 3;
				#src/lib/util/StringUtil.hx:558: characters 17-23
				$o = ($o??'null') . ($c??'null');
				#src/lib/util/StringUtil.hx:559: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:561: lines 561-565
			if ($save === $ul) {
				#src/lib/util/StringUtil.hx:563: characters 17-23
				$o = ($o??'null') . ($c??'null');
				#src/lib/util/StringUtil.hx:564: characters 17-25
				continue;
			}
			#src/lib/util/StringUtil.hx:566: lines 566-584
			if ($save === 3) {
				#src/lib/util/StringUtil.hx:568: characters 17-26
				$save = $ul;
				#src/lib/util/StringUtil.hx:569: characters 17-23
				$o = ($o??'null') . ($c??'null');
				#src/lib/util/StringUtil.hx:570: characters 17-25
				continue;
			} else if (($save === 2) && ($ul === 1)) {
				#src/lib/util/StringUtil.hx:574: characters 17-26
				$save = $ul;
				#src/lib/util/StringUtil.hx:575: characters 17-23
				$o = ($o??'null') . ($c??'null');
				#src/lib/util/StringUtil.hx:576: characters 17-25
				continue;
			} else {
				#src/lib/util/StringUtil.hx:580: characters 17-26
				$save = $ul;
				#src/lib/util/StringUtil.hx:581: characters 17-24
				$o = ($o??'null') . 95;
				#src/lib/util/StringUtil.hx:582: characters 17-23
				$o = ($o??'null') . ($c??'null');
				#src/lib/util/StringUtil.hx:583: characters 17-25
				continue;
			}
		}
		#src/lib/util/StringUtil.hx:586: characters 9-41
		$o2 = \mb_strtolower($o);
		#src/lib/util/StringUtil.hx:587: characters 9-18
		return $o2;
	}

	/**
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(StringUtil::class, 'lib.util.StringUtil');
