<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace lib\util;

use \php\Boot;
use \system\Cs2Hx;
use \php\_Boot\HxString;

class CsvUtil {
	/**
	 * @param string $s
	 * @param int $index
	 * 
	 * @return string
	 */
	public static function Get ($s, $index) {
		#src/lib/util/CsvUtil.hx:54: lines 54-57
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/CsvUtil.hx:56: characters 13-24
			return null;
		}
		#src/lib/util/CsvUtil.hx:58: lines 58-61
		if ($index < 0) {
			#src/lib/util/CsvUtil.hx:60: characters 13-24
			return null;
		}
		#src/lib/util/CsvUtil.hx:62: characters 9-66
		$tokens = Cs2Hx::Split($s, \Array_hx::wrap([44]));
		#src/lib/util/CsvUtil.hx:63: lines 63-66
		if (($tokens !== null) && ($index < $tokens->length)) {
			#src/lib/util/CsvUtil.hx:65: characters 13-33
			return ($tokens->arr[$index] ?? null);
		}
		#src/lib/util/CsvUtil.hx:67: characters 9-20
		return null;
	}

	/**
	 * @param string $s
	 * @param mixed $error
	 * 
	 * @return \Array_hx
	 */
	public static function GetALine ($s, $error = null) {
		#src/lib/util/CsvUtil.hx:31: lines 31-34
		if ($error !== null) {
			#src/lib/util/CsvUtil.hx:33: characters 13-87
			return ParseUtil::ParseIntList($s, $error);
		}
		#src/lib/util/CsvUtil.hx:35: characters 9-50
		return ParseUtil::ParseIntList($s);
	}

	/**
	 * @param string $s
	 * 
	 * @return \Array_hx
	 */
	public static function GetALineString ($s) {
		#src/lib/util/CsvUtil.hx:39: lines 39-42
		if (($s === null) || (mb_strlen($s) === 0)) {
			#src/lib/util/CsvUtil.hx:41: characters 13-24
			return null;
		}
		#src/lib/util/CsvUtil.hx:43: characters 9-54
		$list = new \Array_hx();
		#src/lib/util/CsvUtil.hx:44: characters 9-66
		$tokens = Cs2Hx::Split($s, \Array_hx::wrap([44]));
		#src/lib/util/CsvUtil.hx:45: lines 45-49
		$_g = 0;
		while ($_g < $tokens->length) {
			#src/lib/util/CsvUtil.hx:45: characters 14-15
			$t = ($tokens->arr[$_g] ?? null);
			#src/lib/util/CsvUtil.hx:45: lines 45-49
			++$_g;
			#src/lib/util/CsvUtil.hx:47: characters 13-50
			$t1 = Cs2Hx::Trim($t);
			#src/lib/util/CsvUtil.hx:48: characters 13-26
			$list->arr[$list->length++] = $t1;
		}
		#src/lib/util/CsvUtil.hx:50: characters 9-20
		return $list;
	}

	/**
	 * @param string $s
	 * @param int $index
	 * 
	 * @return string
	 */
	public static function GetAllRest ($s, $index) {
		#src/lib/util/CsvUtil.hx:71: lines 71-74
		if ($index < 0) {
			#src/lib/util/CsvUtil.hx:73: characters 13-24
			return null;
		}
		#src/lib/util/CsvUtil.hx:75: lines 75-78
		if ($index === 0) {
			#src/lib/util/CsvUtil.hx:77: characters 13-21
			return $s;
		}
		#src/lib/util/CsvUtil.hx:79: characters 9-27
		$cmidx = 0;
		#src/lib/util/CsvUtil.hx:80: characters 9-33
		$count_index = 0;
		#src/lib/util/CsvUtil.hx:81: lines 81-94
		while ($count_index < $index) {
			#src/lib/util/CsvUtil.hx:83: characters 21-59
			$startAt = $cmidx;
			#src/lib/util/CsvUtil.hx:83: characters 53-58
			if ($startAt === null) {
				$startAt = 0;
			}
			#src/lib/util/CsvUtil.hx:83: characters 21-59
			$cmidx = HxString::indexOf($s, \mb_chr(44), $startAt);
			#src/lib/util/CsvUtil.hx:84: lines 84-87
			if ($cmidx < 0) {
				#src/lib/util/CsvUtil.hx:86: characters 17-28
				return null;
			}
			#src/lib/util/CsvUtil.hx:88: characters 13-20
			++$cmidx;
			#src/lib/util/CsvUtil.hx:89: characters 13-26
			++$count_index;
			#src/lib/util/CsvUtil.hx:90: lines 90-93
			if ($cmidx >= mb_strlen($s)) {
				#src/lib/util/CsvUtil.hx:92: characters 17-28
				return null;
			}
		}
		#src/lib/util/CsvUtil.hx:95: characters 16-31
		return \mb_substr($s, $cmidx, null);
	}

	/**
	 * @param \Array_hx $data
	 * 
	 * @return string
	 */
	public static function MakeALine ($data) {
		#src/lib/util/CsvUtil.hx:10: characters 9-27
		$s = "";
		#src/lib/util/CsvUtil.hx:11: lines 11-26
		if ($data !== null) {
			#src/lib/util/CsvUtil.hx:13: lines 13-25
			$_g = 0;
			while ($_g < $data->length) {
				#src/lib/util/CsvUtil.hx:13: characters 18-19
				$d = ($data->arr[$_g] ?? null);
				#src/lib/util/CsvUtil.hx:13: lines 13-25
				++$_g;
				#src/lib/util/CsvUtil.hx:15: characters 17-46
				$p = \Std::string($d);
				#src/lib/util/CsvUtil.hx:16: lines 16-19
				if (HxString::indexOf($p, ",") !== -1) {
					#src/lib/util/CsvUtil.hx:18: characters 21-64
					$p = "\"" . ((($p === null ? "" : $p))??'null') . "\"";
				}
				#src/lib/util/CsvUtil.hx:20: lines 20-23
				if (!(($s === null) || (mb_strlen($s) === 0))) {
					#src/lib/util/CsvUtil.hx:22: characters 21-29
					$s = ($s??'null') . ",";
				}
				#src/lib/util/CsvUtil.hx:24: characters 17-23
				$s = ($s??'null') . ($p??'null');
			}
		}
		#src/lib/util/CsvUtil.hx:27: characters 9-17
		return $s;
	}

	/**
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(CsvUtil::class, 'lib.util.CsvUtil');
