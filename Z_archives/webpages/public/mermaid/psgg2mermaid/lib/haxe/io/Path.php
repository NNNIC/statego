<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace haxe\io;

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class provides a convenient way of working with paths. It supports the
 * common path formats:
 * - `directory1/directory2/filename.extension`
 * - `directory1\directory2\filename.extension`
 */
class Path {
	/**
	 * Adds a trailing slash to `path`, if it does not have one already.
	 * If the last slash in `path` is a backslash, a backslash is appended to
	 * `path`.
	 * If the last slash in `path` is a slash, or if no slash is found, a slash
	 * is appended to `path`. In particular, this applies to the empty String
	 * `""`.
	 * If `path` is `null`, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return string
	 */
	public static function addTrailingSlash ($path) {
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:272: lines 272-273
		if (mb_strlen($path) === 0) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:273: characters 4-14
			return "/";
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:274: characters 3-34
		$c1 = HxString::lastIndexOf($path, "/");
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:275: characters 3-35
		$c2 = HxString::lastIndexOf($path, "\\");
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:276: lines 276-286
		if ($c1 < $c2) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:277: lines 277-280
			if ($c2 !== (mb_strlen($path) - 1)) {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:278: characters 5-16
				return ($path??'null') . "\\";
			} else {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:280: characters 5-9
				return $path;
			}
		} else if ($c1 !== (mb_strlen($path) - 1)) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:283: characters 5-15
			return ($path??'null') . "/";
		} else {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:285: characters 5-9
			return $path;
		}
	}

	/**
	 * Returns `true` if the path is an absolute path, and `false` otherwise.
	 * 
	 * @param string $path
	 * 
	 * @return bool
	 */
	public static function isAbsolute ($path) {
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:315: lines 315-316
		if (\StringTools::startsWith($path, "/")) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:316: characters 4-15
			return true;
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:317: lines 317-318
		if (\mb_substr($path, 1, 1) === ":") {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:318: characters 4-15
			return true;
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:319: lines 319-320
		if (\StringTools::startsWith($path, "\\\\")) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:320: characters 4-15
			return true;
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:321: characters 3-15
		return false;
	}

	/**
	 * Joins all paths in `paths` together.
	 * If `paths` is empty, the empty String `""` is returned. Otherwise the
	 * paths are joined with a slash between them.
	 * If `paths` is `null`, the result is unspecified.
	 * 
	 * @param \Array_hx $paths
	 * 
	 * @return string
	 */
	public static function join ($paths) {
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:190: characters 15-68
		$result = [];
		$data = $paths->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			if (($item !== null) && ($item !== "")) {
				$result[] = $item;
			}
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:190: characters 3-69
		$paths = \Array_hx::wrap($result);
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:191: lines 191-193
		if ($paths->length === 0) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:192: characters 4-13
			return "";
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:194: characters 3-23
		$path = ($paths->arr[0] ?? null);
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:195: characters 13-17
		$_g = 1;
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:195: characters 17-29
		$_g1 = $paths->length;
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:195: lines 195-198
		while ($_g < $_g1) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:195: characters 13-29
			$i = $_g++;
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:196: characters 4-8
			$path = Path::addTrailingSlash($path);
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:197: characters 4-20
			$path = ($path??'null') . (($paths->arr[$i] ?? null)??'null');
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:199: characters 3-25
		return Path::normalize($path);
	}

	/**
	 * Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).
	 * Also replaces backslashes `\` with slashes `/` and afterwards turns
	 * multiple slashes into a single one.
	 * If `path` is `null`, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return string
	 */
	public static function normalize ($path) {
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:211: characters 3-19
		$slash = "/";
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:212: characters 3-38
		$path = HxString::split($path, "\\")->join($slash);
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:213: lines 213-214
		if ($path === $slash) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:214: characters 4-16
			return $slash;
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:216: characters 3-19
		$target = new \Array_hx();
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:218: lines 218-228
		$_g = 0;
		$_g1 = HxString::split($path, $slash);
		while ($_g < $_g1->length) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:218: characters 8-13
			$token = ($_g1->arr[$_g] ?? null);
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:218: lines 218-228
			++$_g;
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:219: lines 219-227
			if (($token === "..") && ($target->length > 0) && (($target->arr[$target->length - 1] ?? null) !== "..")) {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:220: characters 5-17
				if ($target->length > 0) {
					$target->length--;
				}
				\array_pop($target->arr);
			} else if ($token === "") {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:222: lines 222-224
				if (($target->length > 0) || (HxString::charCodeAt($path, 0) === 47)) {
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:223: characters 6-24
					$target->arr[$target->length++] = $token;
				}
			} else if ($token !== ".") {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:226: characters 5-23
				$target->arr[$target->length++] = $token;
			}
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:230: characters 3-32
		$tmp = $target->join($slash);
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:231: characters 3-29
		$acc = new \StringBuf();
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:232: characters 3-21
		$colon = false;
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:233: characters 3-23
		$slashes = false;
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:238: characters 13-17
		$_g = 0;
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:238: characters 17-27
		$_g1 = mb_strlen($tmp);
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:238: lines 238-254
		while ($_g < $_g1) {
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:238: characters 13-27
			$i = $_g++;
			#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:239: characters 12-42
			$_g2 = \StringTools::fastCodeAt($tmp, $i);
			if ($_g2 === 47) {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:244: lines 244-252
				if (!$colon) {
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:245: characters 6-20
					$slashes = true;
				} else {
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:246: characters 10-15
					$i1 = $_g2;
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:247: characters 6-19
					$colon = false;
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:248: lines 248-251
					if ($slashes) {
						#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:249: characters 7-19
						$acc->add("/");
						#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:250: characters 7-22
						$slashes = false;
					}
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:252: characters 6-9
					$acc1 = $acc;
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:252: characters 6-20
					$acc1->b = ($acc1->b??'null') . (\mb_chr($i1)??'null');
				}
			} else if ($_g2 === 58) {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:242: characters 6-18
				$acc->add(":");
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:243: characters 6-18
				$colon = true;
			} else {
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:246: characters 10-15
				$i2 = $_g2;
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:247: characters 6-19
				$colon = false;
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:248: lines 248-251
				if ($slashes) {
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:249: characters 7-19
					$acc->add("/");
					#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:250: characters 7-22
					$slashes = false;
				}
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:252: characters 6-9
				$acc2 = $acc;
				#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:252: characters 6-20
				$acc2->b = ($acc2->b??'null') . (\mb_chr($i2)??'null');
			}
		}
		#G:\HaxeToolkit\haxe\std/haxe/io/Path.hx:256: characters 3-24
		return $acc->b;
	}
}

Boot::registerClass(Path::class, 'haxe.io.Path');
