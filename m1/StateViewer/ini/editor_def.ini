;
; Text Editor is inherited from Scintilla
; 
; You may define styles using Scintilla members
; 
; 

[defines]
; you may define variables for this defines.
;
; Value format :
; Color 
;     RGB(NN,NN,NN)
;     #XXXXXX
; Boolean
;     true
;     false
; Numbers
;      NNN  (Integer value)
; String
;      "string"

DEF_COLOR = RGB(52,  52, 52)
CMT_COLOR = RGB(  0,128, 36)
STR_COLOR = RGB(170, 92,128)
PP_COLOR  = RGB(52,  52, 52)
WD_COLOR  = RGB( 0,   0,255)
OP_COLOR  = #191970

[bg-color]
; background color

NORMAL   = Color.White
READONLY = RGB(200,200,200)
SELECT   = RGB(173,214,255)

[lexer]
; Convert StateGo's language to Scintilla Lexical language
; format : ; Scintilla-lexical lang = StateGo's-lang,StateGo's-lang,...

; Most of languages are cpp subset.
Cpp = c++,cpp,c,c#,c-sharp,cs,haxe,java,rust,bash,typescript,bash

;  Css means one of html5 features. not for csharp
Css = css
;
Asm = asm,nasm,masm
;
Batch = bat,batch,cmd
;
Pascal = delphi,pascal
;
VB = vba,basic
;
PhpScript = php
;
Python = phyton
;
Ruby = ruby

; -------------------
; ---- KEY WORDS ----
; -------------------
; grpoup name starts with "Keywords-" and unique-ids.
; 'targetlang' key is  what StateGo's language is used.
; 0 - Keywords 0
; 1 - keywords 1
;  
; * Keyword values can be allowed ambiguous exression because copy and paste from Web sites.

[keywords-C]
targetlang=c,cpp
0=@@@
alignas
alignof
andb
and_eqb
asma
auto
bitandb
bitorb
bool
break
case
catch
char
char8_tc
char16_t
char32_t
class
complb
conceptc
const
const_cast
constevalc
constexpr

constinitc
continue
co_awaitc
co_returnc
co_yieldc
decltype
default
delete
do
double
dynamic_cast
else
enum
explicit
exportc
extern
false
float
for
friend
goto
if
inline
int
long
mutable
namespace
new
noexcept
notb
not_eqb
nullptr
operator
orb
or_eqb
private
protected
public
register reinterpret_cast
requiresc
return
short
signed
sizeof
static
static_assert
static_cast
struct
switch
template
this
thread_local
throw
true
try
typedef
typeid
typename
union
unsigned
using
@@@

[keywords-CSharp]
targetlang=cs,csharp,c#

0=@@@
abstract	as	base	bool
break	byte	case	catch
char	checked	class	const
continue	decimal	default	delegate
do	double	else	enum
event	explicit	extern	false
finally	fixed	float	for
foreach	goto	if	implicit
in	int	interface	internal
is	lock	long	namespace
new	null	object	operator
out	override	params	private
protected	public	readonly	ref
return	sbyte	sealed	short
sizeof	stackalloc	static	string
struct	switch	this	throw
true	try	typeof	uint
ulong	unchecked	unsafe	ushort
using	virtual	void	volatile
while
@@@

1=@@@
add
and
alias
ascending
async
await
by
descending
dynamic
equals
from

get
global
group
init
into
join
let
managed
nameof
nint
not

notnull
nuint
on
or
orderby
partial
partial
record
remove
select

set
unmanaged 
value
var
when 
where
with
yield
@@@

[keywords-Java]
targetlang=java
0=@@@
abstract
assert	
boolean	
break	
byte	
case	
catch	
char	
class	
const	
continue
default
do	
double	
else	
enum	
extends	
final	
finally	
float	
for	
goto
if	
implements
import	
instanceof
int	
interface
long	
native	
new	
package	
private	
protected
public	
return	
short	
static	
strictfp
super	
switch	
synchronized
this	
throw	
throws	
transient
try	
void
volatile
while	
false
true
null
@@@

[Keywords-Haxe]
targetlang=haxe
0=@@@
abstract
break
case
cast
catch
class
continue
default
do
dynamic
else
enum
extends
extern
false
final
for
function
if
implements
import
in
inline
interface
macro
new
null
operator
overload
override
package
private
public
return
static
switch
this
throw
true
try
typedef
untyped
using
var
while
@@@

[keywords-JS]
targetlang=javascript,js
0=@@@
abstract	arguments	await	boolean
break	byte	case	catch
char	class	const	continue
debugger	default	delete	do
double	else	enum	eval
export	extends	false	final
finally	float	for	function
goto	if	implements	import*
in	instanceof	int	interface
let*	long	native	new
null	package	private	protected
public	return	short	static
super*	switch	synchronized	this
throw	throws	transient	true
try	typeof	var	void
volatile	while	with	yield
@@@

[keyword-TS]
targetlang=typescript,ts
0=@@@
 break  as  any 
 case  implements  boolean 
 catch  interface  constructor 
 class  let  declare 
 const  package  get 
 continue  private  module 
 debugger  protected  require 
 default  public  number 
 delete  static  set 
 do  yield  string 
 else  symbol  
 enum  type  
 export  from  
 extends  of  
 false   
 finally   
 for   
 function   
 if   
 import   
 in   
 instanceof   
 new   
 null   
 return   
 super   
 switch   
 this   
 throw   
 true   
 try   
 typeof   
 var   
 void   
 while   
 with   
@@@


[keywords-PHP]
targetlang=php
0=@@@
__halt_compiler	abstract	and	array	as
break	callable 	case	catch	class
clone	const	continue	declare	default
die()	do	echo	else	elseif
empty()	enddeclare	endfor	endforeach	endif
endswitch	endwhile	eval	exit	extends
final	finally 	fn 	for	foreach
function	global	goto	if	implements
include	include_once	instanceof	insteadof interface
isset	list	match 	namespace 	new
or	print	private	protected	public
require	require_once	return	static	switch
throw	trait 	try	unset	use
var	while	xor	yield 	yield from 	
__CLASS__	__DIR__ 	__FILE__	__FUNCTION__	__LINE__	__METHOD__
__NAMESPACE__ 	__TRAIT__ 	
@@@

[keywprds-Python]
targetlang=python
0=@@@
and	
as	
assert
break
class
continue
def	
del	
elif
else
except
False
finally
for	
from	
global	
if	
import
in	
is	
lambda
None
nonloca
not	
or	
pass
raise
return
True
try	
while
with
yield
@@@


[keywords-Ruby]
targetlang=ruby
0=@@@
alias	and	BEGIN
begin	break	case
class	def	defined?
do	else	elsif
END	end	ensure
false	for	if
module	next	nil
not	or	redo
rescue	retry	return
self	super	then
true	undef	unles
until	when	while
yield	_ _FILE_ _	_ _LINE_ _
@@@

[keywords-Swift]
targetlang=swift
0=@@@
associatedtype, class, deinit, enum, extension, fileprivate`, ``func, import, init, inout, internal, let, open, operator, private, protocol, public, static, struct, subscript, typealias, and var
 break, case, continue, default, defer, do, else, fallthrough, for, guard, if, in, repeat, return, switch, where, and while.
 as, Any, catch, false, is, nil, rethrows, super, self, Self, throw, throws, true, and try.
 associativity, convenience, dynamic, didSet, final, get, infix, indirect, lazy, left, mutating, none, nonmutating, optional, override, postfix, precedence, prefix, Protocol, required, right, set, Type, unowned, weak, and willSet. Outside the context in which they appear in the grammar, they can be used as identifiers.
@@@

; --
; The blow is for Styles 
; Group name is same as Style defines

[Style.Default]

;Font="MS UI Gothic"
;Font="AcmeFont"
Font="Consolas"
Size=14
ForeColor=DEF_COLOR

; ▼▼▼　CPP　▼▼▼
[Style.Cpp.Comment]
ForeColor=CMT_COLOR

[Style.Cpp.CommentLine]
ForeColor=CMT_COLOR

[Style.Cpp.CommentDoc]
ForeColor=CMT_COLOR

[Style.Cpp.CommentLineDoc]
ForeColor=CMT_COLOR

[Style.Cpp.CommentDocKeyword]
ForeColor=CMT_COLOR

[Style.Cpp.CommentDocKeywordError]
ForeColor=CMT_COLOR

[Style.Cpp.Identifier]
ForeColor=DEF_COLOR

[Style.Cpp.Number]
ForeColor=STR_COLOR

[Style.Cpp.String]
ForeColor=STR_COLOR

[Style.Cpp.StringRaw]
ForeColor=STR_COLOR

[Style.Cpp.StringEol]
ForeColor=STR_COLOR

[Style.Cpp.Character]
ForeColor=STR_COLOR

[Style.Cpp.Preprocessor]
ForeColor=PP_COLOR

[Style.Cpp.Operator]
ForeColor=OP_COLOR

[Style.Cpp.Word]
ForeColor=WD_COLOR

[Style.Cpp.Word2]
ForeColor=WD_COLOR

[Style.Cpp.GlobalClass]
ForeColor=DEF_COLOR



; ▼▼▼　Asm　▼▼▼
[Style.Asm.Character]
ForeColor=STR_COLOR

[Style.Asm.Comment]
ForeColor=CMT_COLOR

[Style.Asm.CommentBlock]
ForeColor=CMT_COLOR

[Style.Asm.CommentDirective]
ForeColor=CMT_COLOR

[Style.Asm.Operator]
ForeColor=OP_COLOR

[Style.Asm.Register]
ForeColor=WD_COLOR

[Style.Asm.String]
ForeColor=STR_COLOR

[Style.Asm.StringEol]
ForeColor=STR_COLOR

; ▼▼▼　Batch　▼▼▼
[Style.Batch.Command]
ForeColor=WD_COLOR

[Style.Batch.Comment]
ForeColor=CMT_COLOR

[Style.Batch.Label]
ForeColor=STR_COLOR

[Style.Batch.Word]
ForeColor=WD_COLOR

[Style.Batch.Operator]
ForeColor=OP_COLOR

; ▼▼▼　JavaScript　▼▼▼
[Style.JavaScript.Comment]
ForeColor=CMT_COLOR

[Style.JavaScript.CommentBlock]
ForeColor=CMT_COLOR

[Style.JavaScript.Keyword]
ForeColor=WD_COLOR

[Style.JavaScript.Keyword2]
ForeColor=WD_COLOR

; ▼▼▼　Vb　▼▼▼
[Style.Vb.Comment]
ForeColor=CMT_COLOR

[Style.Vb.CommentBlock]
ForeColor=CMT_COLOR

[Style.Vb.Keyword]
ForeColor=WD_COLOR

[Style.Vb.Keyword2]
ForeColor=WD_COLOR

; ▼▼▼　Pascal　▼▼▼

[Style.Pascal.Character]
ForeColor=STR_COLOR

[Style.Pascal.Comment]
ForeColor=CMT_COLOR

[Style.Pascal.Comment2]
ForeColor=CMT_COLOR

[Style.Pascal.CommentLine]
ForeColor=CMT_COLOR

[Style.Pascal.Operator]
ForeColor=OP_COLOR

[Style.Pascal.String]
ForeColor=STR_COLOR

[Style.Pascal.Word]
ForeColor=WD_COLOR

; ▼▼▼　PhpScript　▼▼▼
[Style.PhpScript.Comment]
ForeColor=CMT_COLOR

[Style.PhpScript.CommentLine]
ForeColor=CMT_COLOR

[Style.PhpScript.HString]
ForeColor=STR_COLOR

[Style.PhpScript.HStringVariable]
ForeColor=STR_COLOR

[Style.PhpScript.Operator]
ForeColor=STR_COLOR

[Style.PhpScript.SimpleString]
ForeColor=STR_COLOR

[Style.PhpScript.Word]
ForeColor=WD_COLOR

; ▼▼▼　Python　▼▼▼
[Style.Python.Character]
ForeColor=STR_COLOR

[Style.Python.ClassName]
ForeColor=WD_COLOR

[Style.Python.CommentBlock]
ForeColor=CMT_COLOR

[Style.Python.CommentLine]
ForeColor=CMT_COLOR

[Style.Python.Operator]
ForeColor=CMT_COLOR

[Style.Python.Word]
ForeColor=WD_COLOR

[Style.Python.Word2]
ForeColor=WD_COLOR


; ▼▼▼　Ruby　▼▼▼
[Style.Puby.Character]
ForeColor=STR_COLOR

[Style.Puby.ClassName]
ForeColor=WD_COLOR

[Style.Puby.ClassVer
ForeColor=WD_COLOR

[Style.Puby.CommentLine]
ForeColor=CMT_COLOR


